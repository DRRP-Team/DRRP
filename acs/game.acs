/**
 * Copyright (c) 2017-2019 DRRP-Team
 *
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */

#library game
#include "zcommon.acs"

// Useful functions

function bool isLocalized(str string) {
    return !!strcmp(StrParam(l:string), string);
}

function int getStringWidth(str String) {
    int i = 0;
    while(String[i] != '\0') { i++; }
    return i;
}

function int getStringHeight(str String) {
    int i      = 0;
    int height = 0;

    while(String[i] != '\0') {
        if(String[i++] == '\n') height++;
    }
    return height;
}

function global str getThingName(int id, int state) {
    Print(s:"getThingName(", i:id, s:", ", i:state, s:")");
    return "DRRPTODO";
}

function str localizeSound(str sound) {
    if(GetCVar("drrp_debug_mode")) Print(s:"localizeSound(", s:sound, s:") [", l:"DRRP_D_SOUND_SUFFIX", s:"]");
    return StrParam(s:sound, l:"DRRP_D_SOUND_SUFFIX");;
}

function fixed fmax(fixed val1, fixed val2) {
    return val1 > val2 ? val1 : val2;
}

function fixed fmin(fixed val1, fixed val2) {
    return val1 < val2 ? val1 : val2;
}

function fixed fclamp(fixed value, fixed min, fixed max) {
    return fmax(min, fmin(max, value));
}

// \\ Useful functions

script "fireextfade" (int mode) {
    // TODO: Use additive point light
    if(mode) {
        // Sector_SetFade(0, 255, 255, 255);
    } else {
        // Sector_SetFade(0, 0, 0, 0);
    }
}

// ACS based DRPG Window

Script "window"(str _Text) { // s: -> str
    // This crutch fixes the GZDoom Encoding bug in russian translation
    // https://trello.com/c/Yjn7YM8b
    str Text;
    int TextLen = strlen(_Text);
    for (int i = 0; i < TextLen; i++) {
        if (_Text[i] == 0x20) // space
            Text = StrParam(s:Text, s:" ");
        else
            Text = StrParam(s:Text, c:_Text[i]);
    }

    const int SYM_HEIGHT = 12; // Symbol's height is 12px

    Delay(2);

    int ReadedKey;
    int FirstRun = 1;
    int ScrollY  = 0;
    int height   = getStringHeight(Text);

    Thing_Stop(0); // TID_Player -> 0
    SetPlayerProperty(0, True, PROP_TOTALLYFROZEN);

    While(TRUE) {
        if(ReadedKey == BT_FORWARD && ScrollY > 0) {
            ScrollY -= SYM_HEIGHT;
            Delay(4);
        }
        if(ReadedKey == BT_BACK && ScrollY < height * SYM_HEIGHT) {
            ScrollY += SYM_HEIGHT;
            Delay(4);
        }

        SetHudSize(640, 480, true);
        SetHUDClipRect(0, 0, 0, 0, 0);
        SetFont("M_WINDOW");
        HudMessage(s: "A"; HUDMSG_PLAIN, -10000000, 0, 320.0, 320.1, 1);
        SetFont("smallfont");
        SetHudClipRect(320 - 160 / 2 + 1, 320 + 1, 160 - 2, 70 - 2, 0, true);
        HudMessage(s: Text; HUDMSG_PLAIN, -10000001, CR_WHITE, ((320 - 160 / 2 + 1) << 16) + 3.0 + 0.1, 322.1 - (ScrollY << 16), 1);
        SetHudSize(0, 0, false);
        Delay(1);

        ReadedKey = GetPlayerInput(-1, INPUT_BUTTONS);

        if((FirstRun == 0) && (ReadedKey == BT_USE))
            Break;
        if((FirstRun == 1) && (ReadedKey != BT_USE))
            FirstRun = 0;
    }

    HudMessage(s: ""; HUDMSG_PLAIN, -10000000, 0, 0.5, 0.8, 1);
    HudMessage(s: ""; HUDMSG_PLAIN, -10000001, 0, 0.5, 0.8, 1);
    SetPlayerProperty(0, False, PROP_TOTALLYFROZEN);
}

// ACS based DRPG Lock Window

Script "lockwindow"(str Text, str Password, int ScriptNumber) {
    ScriptCall("DoorCodeInputActor", "DoorCode", Text, Password, ScriptNumber);
    Delay(2);
}

Script "drpgquake"(int time, int intensivity) {
    ACS_Execute(3008, 0, time, intensivity);
    if(GetCVar("drrp_debug_mode")) Print(s:"[DEBUG]: Using DEPRECATED Script drpgquake");
}

Script "transformation"(int tid) {
    if(GetCVar("drrp_debug_mode")) Print(s:"[DEBUG]: Using correct Script transformation");
    if(tid < 0) tid *= -1;

    SetActorState(tid, "Turn");
}

#define NUM_POM_TEXTURES 23
str POM_TEXTURES[NUM_POM_TEXTURES] = { "DRDC1", "DRDC0", "DRDC24", "DRDC25", "DRDC26", "DRDC28", "DRDC34", "DRDC35", "DRDC42", "DRDC44", "DRDC46", "DRDC48", "DRDC2", "DRDC3", "DRDC4", "DRDC5", "DRDC9", "DRDC8", "DRDC41", "DRDC43", "DRDC45", "DRDC27", "DRDC32"};

Script "updateshaders" (bool forced) ENTER {
    bool isHelmetEnabled = GetCVar("drrp_enable_helmet_shader");
    bool isPomEnabled = GetCVar("drrp_enable_pom_shader");

    if(!isPomEnabled) {
        for(int i = 0; i < NUM_POM_TEXTURES; i++) {
            ReplaceTextures(POM_TEXTURES[i], StrParam(s:"NP_", s:POM_TEXTURES[i]));
        }
    } else if(forced) { // Only if called from menudef
        for(int i = 0; i < NUM_POM_TEXTURES; i++) {
            ReplaceTextures(StrParam(s:"NP_", s:POM_TEXTURES[i]), POM_TEXTURES[i]);
        }
    }

    ScriptCall("ShaderControllerActor", "SetEnabled", 0, "HelmetShader", isHelmetEnabled);

    ACS_NamedExecuteAlways("onCinematicShadersReload", 0, forced);
}

// This hook called on change cinematic shaders' CVAR
// Redefine it in your map
Script "onCinematicShadersLoad" (bool forced) {
    if(GetCVar("drrp_debug_mode")) Print(s:"[DEBUG]: Using DEFAULT Script onCinematicShadersUnload");
}

Script "onCinematicShadersUnload" (bool forced) {
    if(GetCVar("drrp_debug_mode")) Print(s:"[DEBUG]: Using DEPRECATED Script onCinematicShadersUnload");
    ScriptCall("ShaderControllerActor", "SetEnabled", 0, "RadialBlurShader", false);
}

#define CINEMATIC_SHADERS_COUNT 20
str CINEMATIC_SHADERS[] = { "RadialBlurShader", "TITLEMAP", "INTRO", "HUB", "SEC1",
                            "SEC2", "SEC3", "SEC4", "SEC5", "SEC6", "SEC7_BEFORE",
                            "SEC7_AFTER", "XHUB", "REAC", "HeatHaze", "FilmGrain",
                            "XHUBGrain", "DefaultLut", "BCFilter", "DoubleVisionShader" };

// This hook must not be redefined but it can be.
// Using to disable all cinematic shaders and (if they're enabled) enable map specific ones.
Script "onCinematicShadersReload" (bool forced) {
    if(GetCVar("drrp_debug_mode")) Print(s:"[DEBUG]: Using correct Script onCinematicShadersReload");

    // Disable all cinematic shaders
    for(int i = 0; i < CINEMATIC_SHADERS_COUNT; i++) {
        ScriptCall("ShaderControllerActor", "SetEnabled", 0, CINEMATIC_SHADERS[i], false);
    }

    // Enable map specific ones if cinematic shader support is enabled
    if(GetCVar("drrp_enable_cinematic_shader")) ACS_NamedExecuteAlways("onCinematicShadersLoad", 0, forced);
}

float playerDamageTimer = 0;

// NOTE: This script must be executed as ACS_NamedExecuteAlways
Script "onPlayerDamage" (void) {
    // TODO: Use player health
    // But we can't get the max player's HP from here :(
    // OK: Enable shader
    ScriptCall("ShaderControllerActor", "SetEnabled", PlayerNumber(), "DoubleVisionShader", true);
    // OK: Timed disable shader
    playerDamageTimer += 5.0;
    ACS_NamedExecute("playerDamageTimer", 0);
}

const int PLAYER_DAMAGE_TICK_VALUE = 3;

// This script decreases the playerDamageTimer value and intensivity of the damage shader
Script "playerDamageTimer" (void) {
    while (playerDamageTimer > 0) {
        playerDamageTimer -= 1.0;
        // OK: Set shader intensivity related to the damage value and the player's health

        ScriptCall("ShaderControllerActor", "SetUniformFloat", PlayerNumber(), "DoubleVisionShader",
                    "distortion", fclamp(playerDamageTimer, 1.0, 5.0));

        Delay(PLAYER_DAMAGE_TICK_VALUE);
    }

    ScriptCall("ShaderControllerActor", "SetEnabled", PlayerNumber(), "DoubleVisionShader", false);
}

/**
 * RPG System
 */

const int KILLS_FOR_NEXT_LEVELUP = 18;

struct player_t {
    int level;
    int XP;
    int maxHealth;
    int maxArmor;
    int defence;
    int strength;
    int accuracy;
    int agility;
}

world player_t Player;
bool init = false;

Script "onActorDie" (bool killedByPlayer, bool forceLevelUp) {
    if (!init) {
        Player.maxHealth = 30;
        Player.level = 1;
        init = true;
    }
    if (!killedByPlayer) Terminate;

    Player.XP++;

    if (Player.XP % KILLS_FOR_NEXT_LEVELUP == 0 || forceLevelUp) {
        // Levelup
        GiveInventory("DRRPPlayerLevel", 4);
        Player.Level        += 1;
        Player.maxHealth    += 4;
        Player.maxArmor     += 4;
        Player.defence      += 2;
        Player.strength     += 2;
        Player.accuracy     += 1;
        Player.agility      += 1;
        PlaySound(0, "player/taunt", CHAN_VOICE, 0.7);
        ACS_NamedExecuteWait("window", 0, StrParam(
            s:"- ", l:"DRRP_B_ID78", s:" -\n",  // Level up!
            l:"DRRP_B_ID76", i:Player.level, s:"\n",       // Level:
            l:"DRRP_B_ID74", i:4, s:"\n",       // Max Health:
            l:"DRRP_B_ID72", i:4, s:"\n",       // Max Armor:
            l:"DRRP_B_ID73", i:2, s:"\n",       // Defense:
            l:"DRRP_B_ID75", i:2, s:"\n",       // Strength:
            l:"DRRP_B_ID71", i:1, s:"\n",       // Accuracy:
            l:"DRRP_B_ID70", i:1, s:"\n\n",     // Agility:
            l:"DRRP_B_ID77"));                  // Helath restored.
    }

    // print (s: "Kills: ", i:Player.XP, s:" Level: ", i:Player.Level);
}

const int RPG_DAMAGE_STRENGTH_MULTIPLIER = 1; // Per strength value

Script "getRPGAttackDamage" (int min, int max) {
    if (GetCVar("drrp_debug_mode")) Log(s:"getRPGAttackDamage(", i:min, s:", ", i:max, s:")");
    if (min == 0 && GetCVar("drrp_debug_mode")) Print(s:"[BUG]: getRPGDamage(0)");
    if (max == 0) max = min;

    int damage = random(min + (Player.strength * RPG_DAMAGE_STRENGTH_MULTIPLIER),
                        max + (Player.strength * RPG_DAMAGE_STRENGTH_MULTIPLIER));

    if (GetCVar("drrp_debug_mode")) Print(s:"Damage: ", i:damage);

    SetResultValue(damage);
}

Script "getRPGDefenseDamage" (int damage) {
    if (GetCVar("drrp_debug_mode")) Print(s:"Inner Damage: ", i:damage);

    SetResultValue(damage);
}

Script "levelUp" (void) { // for the "pukename levelup" command
    ACS_NamedExecuteAlways("onActorDie", 0, true, true);
}

#include "flashlight.acs"
#include "mapapis.acs"