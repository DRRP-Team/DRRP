/**
 * Copyright (c) 2017-2019 DRRP-Team
 *
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */

#library game
#include "zcommon.acs"

// Useful functions

function bool isLocalized(str string) {
    return !!strcmp(StrParam(l:string), string);
}

function int getStringWidth(str String) {
    int i = 0;
    while(String[i] != '\0') { i++; }
    return i;
}

function int getStringHeight(str String) {
    int i       = 0;
    int height = 0;

    while(String[i] != '\0') {
        if(String[i++] == '\n') height++;
    }
    return height;
}

function global str getThingName(int id, int state) {
    print(s:"getThingName(", i:id, s:", ", i:state, s:")");
    return "DRRPTODO";
}

// \\ Useful functions

script "fireextfade" (int mode) {
    // TODO: Use additive point light
    if(mode) {
        // Sector_SetFade(0, 255, 255, 255);
    } else {
        // Sector_SetFade(0, 0, 0, 0);
    }
}

// ACS based DRPG Window

Script "window"(str Text) { // s: -> str
    const int SYM_HEIGHT = 12; // Symbol's height is 12px

    delay(2);

    int ReadedKey;
    int FirstRun = 1;
    int ScrollY  = 0;
    int height   = getStringHeight(Text);

    Thing_Stop(0); // TID_Player -> 0
    SetPlayerProperty(0, True, PROP_TOTALLYFROZEN);

    While(TRUE) {
        if(ReadedKey == BT_FORWARD && ScrollY > 0) {
            ScrollY -= SYM_HEIGHT;
            delay(4);
        }
        if(ReadedKey == BT_BACK && ScrollY < height * SYM_HEIGHT) {
            ScrollY += SYM_HEIGHT;
            delay(4);
        }

        SetHudSize(640, 480, true);
        SetHUDClipRect(0, 0, 0, 0, 0);
        SetFont("M_WINDOW");
        HudMessage(s: "A"; HUDMSG_PLAIN, -10000000, 0, 320.0, 320.1, 1);
        SetFont("SMALLFONT");
        SetHudClipRect(320 - 160 / 2 + 1, 320 + 1, 160 - 2, 70 - 2, 0, true);
        HudMessage(s: Text; HUDMSG_PLAIN, -10000001, CR_WHITE, ((320 - 160 / 2 + 1) << 16) + 3.0 + 0.1, 322.1 - (ScrollY << 16), 1);
        SetHudSize(0, 0, false);
        delay(1);

        ReadedKey = GetPlayerInput(-1, INPUT_BUTTONS);

        if((FirstRun == 0) && (ReadedKey == BT_USE))
            Break;
        if((FirstRun == 1) && (ReadedKey != BT_USE))
            FirstRun = 0;
    }

    HudMessage(s: ""; HUDMSG_PLAIN, -10000000, 0, 0.5, 0.8, 1);
    HudMessage(s: ""; HUDMSG_PLAIN, -10000001, 0, 0.5, 0.8, 1);
    SetPlayerProperty(0, False, PROP_TOTALLYFROZEN);
}

// ACS based DRPG Lock Window

Script "lockwindow"(str Text, str Password, int ScriptNumber) {
    ScriptCall("DoorCodeInputActor", "DoorCode", Text, Password, ScriptNumber);
    Delay(2);
}

Script "drpgquake"(int time, int intensivity) {
    ACS_Execute(3008, time, intensivity);
    if(GetCVar("drrp_debug_mode")) print(s:"[DEBUG]: Using DEPRECATED Script drpgquake");
}

#define NUM_POM_TEXTURES 23
str POM_TEXTURES[NUM_POM_TEXTURES] = { "DRDC1", "DRDC0", "DRDC24", "DRDC25", "DRDC26", "DRDC28", "DRDC34", "DRDC35", "DRDC42", "DRDC44", "DRDC46", "DRDC48", "DRDC2", "DRDC3", "DRDC4", "DRDC5", "DRDC9", "DRDC8", "DRDC41", "DRDC43", "DRDC45", "DRDC27", "DRDC32"};

Script "updatepom" (int forced) ENTER {
	bool isPomEnabled = GetCVar("drrp_enable_pom_shader");

	if(!isPomEnabled) {
		for(int i = 0; i < NUM_POM_TEXTURES; i++) {
			ReplaceTextures(POM_TEXTURES[i], StrParam(s:"NP_", s:POM_TEXTURES[i]));
		}
	} else if(forced) { // Only if called from menudef
		for(int i = 0; i < NUM_POM_TEXTURES; i++) {
			ReplaceTextures(StrParam(s:"NP_", s:POM_TEXTURES[i]), POM_TEXTURES[i]);
		}
	}
}

#include "flashlight.acs"
#include "mapapis.acs"
