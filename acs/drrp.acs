/**
 * Copyright (c) 2017-2022 DRRP-Team
 *
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */

#include "zcommon.acs"

const int SECONDS = 35; // Ticks per second

// Useful functions

function bool isLocalized(str string) {
    return !!strcmp(StrParam(l:string), string);
}

function int getStringWidth(str String) {
    int i = 0;
    while(String[i] != '\0') { i++; }
    return i;
}

function int getStringHeight(str String) {
    int i      = 0;
    int height = 0;

    while(String[i] != '\0') {
        if(String[i++] == '\n') height++;
    }
    return height;
}

function global str getThingName(int id, int state) {
    Print(s:"getThingName(", i:id, s:", ", i:state, s:")");
    return "DRRPTODO";
}

function str localizeSound(str sound) {
    if(GetCVar("drrp_debug_mode")) Print(s:"localizeSound(", s:sound, s:") [", l:"DRRP_D_SOUND_SUFFIX", s:"]");
    return StrParam(s:sound, l:"DRRP_D_SOUND_SUFFIX");;
}

function fixed fmax(fixed val1, fixed val2) {
    return val1 > val2 ? val1 : val2;
}

function fixed fmin(fixed val1, fixed val2) {
    return val1 < val2 ? val1 : val2;
}

function fixed fclamp(fixed value, fixed min, fixed max) {
    return fmax(min, fmin(max, value));
}

// \\ Useful functions

Script "fireextfade" (int mode) {
    // TODO: Use additive point light
    if(mode) {
        // Sector_SetFade(0, 255, 255, 255);
    } else {
        // Sector_SetFade(0, 0, 0, 0);
    }
}

function fixed toFixed(int value) {
    return value << 16;
}

function int toInt(fixed value) {
    return value >> 16;
}

const fixed HUD_CENTER = 0.0;
const fixed HUD_TOP = 0.1;
const fixed HUD_BOTTOM = 0.2;
const fixed HUD_LEFT = 0.1;
const fixed HUD_RIGHT = 0.2;

// ACS based DRPG Window

const int SYM_HEIGHT = 9; // Symbol's height is 12px
const int SCALE = 2; // The bigger - the bigger

Script "window"(str _Text) { // s: -> str
    // This crutch fixes the GZDoom Encoding bug in russian translation
    // https://trello.com/c/Yjn7YM8b
    str Text;
    int TextLen = strlen(_Text);
    for (int i = 0; i < TextLen; i++) {
        if (_Text[i] == 0x20) // space
            Text = StrParam(s:Text, s:" ");
        else
            Text = StrParam(s:Text, c:_Text[i]);
    }

    Delay(2);

    int ReadedKey;
    int FirstRun = 1;
    int ScrollY  = 0;
    int height   = getStringHeight(Text);

    Thing_Stop(0); // TID_Player -> 0
    SetPlayerProperty(0, True, PROP_TOTALLYFROZEN);

    While(TRUE) {
        if(ReadedKey & BT_FORWARD && ScrollY > 0) {
            ScrollY -= SYM_HEIGHT;
            Delay(4);
        }
        if(ReadedKey & BT_BACK && ScrollY < height * SYM_HEIGHT) {
            ScrollY += SYM_HEIGHT;
            Delay(4);
        }

        SetHudSize(640 / SCALE, 480 / SCALE, true);
        SetHUDClipRect(0, 0, 0, 0, 0);
        SetFont("M_WINDOW");
        HudMessage(s: "A"; HUDMSG_PLAIN, -10000000, 0,
            toFixed(320 / SCALE - 80) + HUD_LEFT, // x
            toFixed(260 / SCALE - 5) + HUD_TOP, // y
            1);
        SetFont("smallfont");
        SetHudClipRect(
            320 / SCALE - 80, // x
            260 / SCALE, // y
            160 - 2, // width
            SYM_HEIGHT * 7 + 1, // height
            0, true);
        HudMessage(s: Text;
            HUDMSG_PLAIN, // type
            -10000001, // id
            CR_WHITE, // color
            toFixed(320 / SCALE - 76) + HUD_LEFT, // x
            toFixed(260 / SCALE - ScrollY) + HUD_TOP, // y
            1); // alpha
        SetHudSize(0, 0, false);
        Delay(1);

        ReadedKey = GetPlayerInput(-1, INPUT_BUTTONS);

        if((FirstRun == 0) && (ReadedKey & BT_USE))
            Break;
        if((FirstRun == 1) && !(ReadedKey & BT_USE))
            FirstRun = 0;
    }

    HudMessage(s: ""; HUDMSG_PLAIN, -10000000, 0, 0.5, 0.8, 1);
    HudMessage(s: ""; HUDMSG_PLAIN, -10000001, 0, 0.5, 0.8, 1);
    SetPlayerProperty(0, False, PROP_TOTALLYFROZEN);
}

Script "lockwindow"(str Text, str Password, int ScriptNumber) {
    ScriptCall("DoorCodeInputActor", "DoorCode", Text, Password, ScriptNumber);
    Delay(2);
}

const int BLOOD_FLASH_ID = 30;
const int BLOOD_FLASH_LAYERS = 2;

// Player's bloody damage flash visual effect.
int flashMessageID = BLOOD_FLASH_ID;
Script "BloodFlashVisual" ( int flashType, int receivedDamage ) {
	if (!GetCVar("drrp_enable_blood_flashes")) Terminate;

	if ( flashType == 0 ) flashType = Random(1, 4);

    if ( flashType > 0 && flashType < 4 ) {
        // Cyclic HudMessage id:
		flashMessageID = ((flashMessageID + 1) % BLOOD_FLASH_LAYERS) + BLOOD_FLASH_ID;

        SetHudSize( 64, 64, false );
        SetFont( StrParam( s:"SPLASH_", i:flashType ) );
        HudMessage( s: "a"; HUDMSG_FADEOUT | HUDMSG_ALPHA, flashMessageID, CR_GRAY, 32.0, 32.0, 0.33, 0.5, 0.3);
    }
}

Script "drpgquake"(int time, int intensivity) {
    ACS_Execute(3008, 0, time, intensivity);
    if(GetCVar("drrp_debug_mode")) Print(s:"[DEBUG]: Using DEPRECATED Script drpgquake");
}

Script "transformation"(int tid, int timedelay) {
    if(GetCVar("drrp_debug_mode")) Print(s:"[DEBUG]: Using correct Script transformation");
    if(tid < 0) tid *= -1;

    SetActorState(tid, "Turn");
    Delay(timedelay || 2);
}

/**
 * RPG System
 */

// For "/ZScript/RPGSystem.zsc":
enum RPGGetFeatureStaticTypes {
    RPG_Level,
    RPG_Experience,
    RPG_NextLevelXP,

    RPG_MaxHealth,
    RPG_MaxArmor,

    RPG_Accuracy,
    RPG_Agility,
    RPG_Defense,
    RPG_Strength
};


Script "LevelDoneNotifierVisual" ( void ) {
    int monsterstotal  = GetLevelInfo( LEVELINFO_TOTAL_MONSTERS );
    int monsterskilled = GetLevelInfo( LEVELINFO_KILLED_MONSTERS);

    int secretstotal   = GetLevelInfo( LEVELINFO_TOTAL_SECRETS  );
    int secretsfound   = GetLevelInfo( LEVELINFO_FOUND_SECRETS  );

    SetFont( "BIGFONT" );

    if ( monsterstotal && monsterskilled == monsterstotal ) {
        HudMessage( l:"DRRP_D_ACH_MONSTERS"; HUDMSG_TYPEON | HUDMSG_LOG, 18, CR_GRAY, 1.5, 0.82, 3.0, 0.005, 1.0 );
        LocalAmbientSound( "COMPLETE", 115 );
    }

    if ( secretstotal && secretsfound == secretstotal ) {
        HudMessage( l:"DRRP_D_ACH_SECRETS"; HUDMSG_TYPEON | HUDMSG_LOG, 18, CR_GRAY, 1.5, 0.82, 3.0, 0.005, 1.0 );
        LocalAmbientSound( "SECRETS", 115 );
    }
}

Script "levelUp" (bool windowOnly) {
    int pLevel = ScriptCall("DRRPPlayer", "GetFeatureStatic", RPG_Level);

    if (!windowOnly) {
        pLevel++;
        ScriptCall("DRRPPlayer", "SetFeatureStatic", RPG_Level, pLevel);
    }

    ActivatorSound("player/levelup", 127);
    ACS_NamedExecuteWait("window", 0, StrParam(
        s:"- ", l:"DRRP_B_ID78", s:" -\n",  // Level up!
        l:"DRRP_B_ID76", i:pLevel, s:"\n",  // Level:
        l:"DRRP_B_ID74", i:4, s:"\n",       // Max Health:
        l:"DRRP_B_ID72", i:4, s:"\n",       // Max Armor:
        l:"DRRP_B_ID73", i:2, s:"\n",       // Defense:
        l:"DRRP_B_ID75", i:2, s:"\n",       // Strength:
        l:"DRRP_B_ID71", i:1, s:"\n",       // Accuracy:
        l:"DRRP_B_ID70", i:1, s:"\n\n",     // Agility:
        l:"DRRP_B_ID77"));                  // Health restored.
}


#include "inc_flashlight.acs"
#include "inc_mapapis.acs"
#include "inc_shaders.acs"