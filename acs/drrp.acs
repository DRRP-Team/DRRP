/**
 * Copyright (c) 2017-2022 DRRP-Team
 *
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */

#include "zcommon.acs"

const int SECONDS = 35; // Ticks per second

// Useful functions

function bool isLocalized(str string) {
    return !!strcmp(StrParam(l:string), string);
}

function int getStringWidth(str String) {
    int i = 0;
    while(String[i] != '\0') { i++; }
    return i;
}

function int getStringHeight(str String) {
    int i      = 0;
    int height = 0;

    while(String[i] != '\0') {
        if(String[i++] == '\n') height++;
    }
    return height;
}

function global str getThingName(int id, int state) {
    Print(s:"getThingName(", i:id, s:", ", i:state, s:")");
    return "DRRPTODO";
}

function str localizeSound(str sound) {
    if(GetCVar("drrp_debug_mode")) Print(s:"localizeSound(", s:sound, s:") [", l:"DRRP_D_SOUND_SUFFIX", s:"]");
    return StrParam(s:sound, l:"DRRP_D_SOUND_SUFFIX");;
}

function fixed fmax(fixed val1, fixed val2) {
    return val1 > val2 ? val1 : val2;
}

function fixed fmin(fixed val1, fixed val2) {
    return val1 < val2 ? val1 : val2;
}

function fixed fclamp(fixed value, fixed min, fixed max) {
    return fmax(min, fmin(max, value));
}

// \\ Useful functions

Script "fireextfade" (int mode) {
    // TODO: Use additive point light
    if(mode) {
        // Sector_SetFade(0, 255, 255, 255);
    } else {
        // Sector_SetFade(0, 0, 0, 0);
    }
}

function fixed toFixed(int value) {
    return value << 16;
}

function int toInt(fixed value) {
    return value >> 16;
}

function int toFloor(fixed value) {
    if (value < 10000) {
        return value;
    }

    return toInt(value);
}

// Can be used if you don't have enough script parameters
function int encodeXY(int x, int y) {
    return (x << 16) | y;
}

function int decodeX(int encoded) {
    return encoded >> 16;
}

function int decodeY(int encoded) {
    return encoded & 0xFFFF;
}

const fixed HUD_CENTER = 0.0;
const fixed HUD_TOP = 0.1;
const fixed HUD_BOTTOM = 0.2;
const fixed HUD_LEFT = 0.1;
const fixed HUD_RIGHT = 0.2;

// ACS based DRPG Window

// This crutch fixes the GZDoom Encoding bug in russian translation
// https://trello.com/c/Yjn7YM8b
function str fixEncodingBug(str text) {
    str output;
    int TextLen = strlen(text);
    for (int i = 0; i < TextLen; i++) {
        if (text[i] == 0x20) // space
            output = StrParam(s:output, s:" ");
        else
            output = StrParam(s:output, c:text[i]);
    }

    return output;
}

function int idivF(int a, int b) {
    return toFixed(a) / toFixed(b);
}

function int idivI(int a, int b) {
    return toFloor(idivF(a, b));
}

function float fapplyScaleF(float value) {
    float SCALE = GetCVar("drrp_window_scale");

    return value / SCALE;
}

function float iapplyScaleF(int value) {
    float val = toFixed(value);

    return fapplyScaleF(val);
}

function int fapplyScaleI(float value) {
    return toFloor(fapplyScaleF(value));
}

function int iapplyScaleI(int value) {
    return toFloor(iapplyScaleF(value));
}


const int SYM_HEIGHT = 9; // Symbol's height is 12px

function void drawDialogFrame(int posX, int posY, bool scrollable) {
    SetHudSize(iapplyScaleI(640), iapplyScaleI(480), true);
    if (scrollable) SetFont("M_DLGSCR");
    else SetFont("M_DLGNSC");
    HudMessage(s: "A"; HUDMSG_PLAIN, -10000000, 0,
        toFixed(posX) + HUD_LEFT,
        toFixed(posY - 5) + HUD_TOP,
        1);
}

function void drawDialogWindow(str Text, int posX, int posY, int ScrollY, int color) {
    SetHudSize(iapplyScaleI(640), iapplyScaleI(480), true);
    SetHUDClipRect(0, 0, 0, 0, 0);

    drawDialogFrame(posX, posY, ScrollY >= 0);

    if (ScrollY < 0) ScrollY = 0;

    SetFont("smallfont");
    SetHudClipRect(
        posX,
        posY,
        160 - 2,
        SYM_HEIGHT * 7 + 1,
        0, true);
    HudMessage(s: Text;
        HUDMSG_PLAIN,
        -10000001, /* id */
        color,
        toFixed(posX + 4) + HUD_LEFT,
        toFixed(posY - (ScrollY * SYM_HEIGHT)) + HUD_TOP,
        1); /* hold */

    SetHudSize(0, 0, false);
}

function void drawDialogTypingWindow(str Text, int posX, int posY, bool scrollable, int color) {
    SetHudSize(iapplyScaleI(640), iapplyScaleI(480), true);
    SetHUDClipRect(0, 0, 0, 0, 0);

    drawDialogFrame(posX, posY, scrollable);

    SetFont("smallfont");
    SetHudClipRect(
        posX,
        posY,
        160 - 2,
        SYM_HEIGHT * 7 + 1,
        0, true);
    HudMessage(s: Text;
        HUDMSG_TYPEON,
        -10000001, /* id */
        color,
        toFixed(posX + 4) + HUD_LEFT,
        toFixed(posY) + HUD_TOP,
        10.0, /* hold */
        0.01,
        1); /* fadeout */

    SetHudSize(0, 0, false);
}

function void clearDialogWindow(void) {
    HudMessage(s: ""; HUDMSG_PLAIN, -10000000, 0, 0.5, 0.8, 1);
    HudMessage(s: ""; HUDMSG_PLAIN, -10000001, 0, 0.5, 0.8, 1);
}

function int getColorByType(int type) {
    switch (type) {
        case 1: return CR_GREEN; /* Terminal */
        case 2: return CR_RED; /* Evil */
        case 3: return CR_YELLOW; /* Hint */
        case 0: /* Dialogue */
        default:
            return CR_WHITE;
    }
}

const int LINES_ON_SCREEN = 7;

Script "window" (str _Text, int type) {
    const int posX = iapplyScaleI(320) - 80;
    const int posY = iapplyScaleI(260);

    const int COLOR = getColorByType(type);

    str Text = fixEncodingBug(_Text);

    Delay(2);

    int ReadedKey;
    int FirstRun = 1;
    int ScrollY  = 0;
    int height   = getStringHeight(Text);

    bool enableScroll = height >= LINES_ON_SCREEN;

    if (!enableScroll) ScrollY = -1;

    Thing_Stop(0); /* TID_Player -> 0 */
    SetPlayerProperty(0, True, PROP_TOTALLYFROZEN);
    SetPlayerProperty(0, 2, PROP_INVULNERABILITY);

    drawDialogTypingWindow(Text,
        posX,
        posY,
        enableScroll,
        COLOR
    );

    int typingDelayTimer = 0;

    While(TRUE) {
        typingDelayTimer++;

        if (typingDelayTimer > 32) {
            if(enableScroll && ReadedKey & BT_FORWARD && ScrollY > 0) {
                ScrollY--;
                Delay(4);
            }
            if(enableScroll && ReadedKey & BT_BACK && ScrollY < height) {
                ScrollY++;
                Delay(4);
            }

            drawDialogWindow(Text, posX, posY, ScrollY, COLOR);
        }

        Delay(1);

        ReadedKey = GetPlayerInput(-1, INPUT_BUTTONS);

        if((FirstRun == 0) && (ReadedKey & BT_USE))
            break;
        if((FirstRun == 1) && !(ReadedKey & BT_USE))
            FirstRun = 0;
    }

    clearDialogWindow();

    SetPlayerProperty(0, False, PROP_TOTALLYFROZEN);
    SetPlayerProperty(0, 0, PROP_INVULNERABILITY);
}

Script "hintwindow" (str _Text) {
    str Text = fixEncodingBug(_Text);

    Delay(2);

    const int FINAL_POS_X = 410;
    const int FINAL_POS_Y = 10;
    const int TICKS = 5 * SECONDS;
    const int COLOR = getColorByType(3);

    const int ANIMATION_OFFSET = 200;
    const int ANIMATION_SPEED = 20;

    /* In animation */

    for (int i = ANIMATION_OFFSET; i >= 0; i-=ANIMATION_SPEED) {
        drawDialogWindow(Text,
            iapplyScaleI(FINAL_POS_X + i),
            iapplyScaleI(FINAL_POS_Y),
            0,
            COLOR
        );
        Delay(1);
    }

    Delay(TICKS);

    for (int i = 0; i < ANIMATION_OFFSET; i+=ANIMATION_SPEED) {
        drawDialogWindow(Text,
            iapplyScaleI(FINAL_POS_X + i),
            iapplyScaleI(FINAL_POS_Y),
            -1,
            COLOR
        );
        Delay(1);
    }

    clearDialogWindow();
}

Script "lockwindow"(str Text, str Password, int ScriptNumber) {
    ScriptCall("DoorCodeInputActor", "DoorCode", Text, Password, ScriptNumber);
    Delay(2);
}

const int BLOOD_FLASH_ID = 30;
const int BLOOD_FLASH_LAYERS = 2;

// Player's bloody damage flash visual effect.
int flashMessageID = BLOOD_FLASH_ID;
Script "BloodFlashVisual" ( int flashType, int receivedDamage ) {
	if (!GetCVar("drrp_enable_blood_flashes")) Terminate;

	if ( flashType == 0 ) flashType = Random(1, 4);

    if ( flashType > 0 && flashType < 4 ) {
        // Cyclic HudMessage id:
		flashMessageID = ((flashMessageID + 1) % BLOOD_FLASH_LAYERS) + BLOOD_FLASH_ID;

        SetHudSize( 64, 64, false );
        SetFont( StrParam( s:"SPLASH_", i:flashType ) );
        HudMessage( s: "a"; HUDMSG_FADEOUT | HUDMSG_ALPHA, flashMessageID, CR_GRAY, 32.0, 32.0, 0.33, 0.5, 0.3);
    }
}

Script "drpgquake"(int time, int intensivity) {
    ACS_Execute(3008, 0, time, intensivity);
    if(GetCVar("drrp_debug_mode")) Print(s:"[DEBUG]: Using DEPRECATED Script drpgquake");
}

Script "transformation"(int tid, int timedelay) {
    if(GetCVar("drrp_debug_mode")) Print(s:"[DEBUG]: Using correct Script transformation");
    if(tid < 0) tid *= -1;

    SetActorState(tid, "Turn");
    Delay(timedelay || 2);
}

/**
 * RPG System
 */

// For "/ZScript/RPGSystem.zsc":
enum RPGGetFeatureStaticTypes {
    RPG_Level,
    RPG_Experience,
    RPG_NextLevelXP,

    RPG_MaxHealth,
    RPG_MaxArmor,

    RPG_Accuracy,
    RPG_Agility,
    RPG_Defense,
    RPG_Strength
};


Script "LevelDoneNotifierVisual" ( void ) {
    int monsterstotal  = GetLevelInfo( LEVELINFO_TOTAL_MONSTERS );
    int monsterskilled = GetLevelInfo( LEVELINFO_KILLED_MONSTERS);

    int secretstotal   = GetLevelInfo( LEVELINFO_TOTAL_SECRETS  );
    int secretsfound   = GetLevelInfo( LEVELINFO_FOUND_SECRETS  );

    SetFont( "BIGFONT" );

    if ( monsterstotal && monsterskilled == monsterstotal ) {
        HudMessage( l:"DRRP_D_ACH_MONSTERS"; HUDMSG_TYPEON | HUDMSG_LOG, 18, CR_GRAY, 1.5, 0.82, 3.0, 0.005, 1.0 );
        LocalAmbientSound( "COMPLETE", 115 );
    }

    if ( secretstotal && secretsfound == secretstotal ) {
        HudMessage( l:"DRRP_D_ACH_SECRETS"; HUDMSG_TYPEON | HUDMSG_LOG, 18, CR_GRAY, 1.5, 0.82, 3.0, 0.005, 1.0 );
        LocalAmbientSound( "SECRETS", 115 );
    }
}

Script "levelUp" (bool windowOnly) {
    int pLevel = ScriptCall("DRRPPlayer", "GetFeatureStatic", RPG_Level);

    if (!windowOnly) {
        pLevel++;
        ScriptCall("DRRPPlayer", "SetFeatureStatic", RPG_Level, pLevel);
    }

    ScriptCall("ConversationController", "SetGlobalFreeze", true);

    ActivatorSound("player/levelup", 127);
    ACS_NamedExecuteWait("window", 0, StrParam(
        s:"- ", l:"DRRP_B_ID78", s:" -\n",  // Level up!
        l:"DRRP_B_ID76", i:pLevel, s:"\n",  // Level:
        l:"DRRP_B_ID74", i:4, s:"\n",       // Max Health:
        l:"DRRP_B_ID72", i:4, s:"\n",       // Max Armor:
        l:"DRRP_B_ID73", i:2, s:"\n",       // Defense:
        l:"DRRP_B_ID75", i:2, s:"\n",       // Strength:
        l:"DRRP_B_ID71", i:1, s:"\n",       // Accuracy:
        l:"DRRP_B_ID70", i:1, s:"\n\n",     // Agility:
        l:"DRRP_B_ID77"));                  // Health restored.

    ScriptCall("ConversationController", "SetGlobalFreeze", false);
}


#include "inc_flashlight.acs"
#include "inc_mapapis.acs"
#include "inc_shaders.acs"