/**
 * Copyright (c) 2017-2019 DRRP-Team
 *
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */

#library game
#include "zcommon.acs"

const int SECONDS = 35; // Ticks per second

// Useful functions

function bool isLocalized(str string) {
    return !!strcmp(StrParam(l:string), string);
}

function int getStringWidth(str String) {
    int i = 0;
    while(String[i] != '\0') { i++; }
    return i;
}

function int getStringHeight(str String) {
    int i      = 0;
    int height = 0;

    while(String[i] != '\0') {
        if(String[i++] == '\n') height++;
    }
    return height;
}

function global str getThingName(int id, int state) {
    Print(s:"getThingName(", i:id, s:", ", i:state, s:")");
    return "DRRPTODO";
}

function str localizeSound(str sound) {
    if(GetCVar("drrp_debug_mode")) Print(s:"localizeSound(", s:sound, s:") [", l:"DRRP_D_SOUND_SUFFIX", s:"]");
    return StrParam(s:sound, l:"DRRP_D_SOUND_SUFFIX");;
}

function fixed fmax(fixed val1, fixed val2) {
    return val1 > val2 ? val1 : val2;
}

function fixed fmin(fixed val1, fixed val2) {
    return val1 < val2 ? val1 : val2;
}

function fixed fclamp(fixed value, fixed min, fixed max) {
    return fmax(min, fmin(max, value));
}

// \\ Useful functions

script "fireextfade" (int mode) {
    // TODO: Use additive point light
    if(mode) {
        // Sector_SetFade(0, 255, 255, 255);
    } else {
        // Sector_SetFade(0, 0, 0, 0);
    }
}

// ACS based DRPG Window

Script "window"(str _Text) { // s: -> str
    // This crutch fixes the GZDoom Encoding bug in russian translation
    // https://trello.com/c/Yjn7YM8b
    str Text;
    int TextLen = strlen(_Text);
    for (int i = 0; i < TextLen; i++) {
        if (_Text[i] == 0x20) // space
            Text = StrParam(s:Text, s:" ");
        else
            Text = StrParam(s:Text, c:_Text[i]);
    }

    const int SYM_HEIGHT = 12; // Symbol's height is 12px

    Delay(2);

    int ReadedKey;
    int FirstRun = 1;
    int ScrollY  = 0;
    int height   = getStringHeight(Text);

    Thing_Stop(0); // TID_Player -> 0
    SetPlayerProperty(0, True, PROP_TOTALLYFROZEN);

    While(TRUE) {
        if(ReadedKey == BT_FORWARD && ScrollY > 0) {
            ScrollY -= SYM_HEIGHT;
            Delay(4);
        }
        if(ReadedKey == BT_BACK && ScrollY < height * SYM_HEIGHT) {
            ScrollY += SYM_HEIGHT;
            Delay(4);
        }

        SetHudSize(640, 480, true);
        SetHUDClipRect(0, 0, 0, 0, 0);
        SetFont("M_WINDOW");
        HudMessage(s: "A"; HUDMSG_PLAIN, -10000000, 0, 324.0, 320.1, 1);
        SetFont("smallfont");
        SetHudClipRect(320 - 160 / 2 + 1, 320 + 1, 160 - 2, 70 - 2, 0, true);
        HudMessage(s: Text; HUDMSG_PLAIN, -10000001, CR_WHITE, ((320 - 160 / 2 + 1) << 16) + 3.0 + 0.1, 322.1 - (ScrollY << 16), 1);
        SetHudSize(0, 0, false);
        Delay(1);

        ReadedKey = GetPlayerInput(-1, INPUT_BUTTONS);

        if((FirstRun == 0) && (ReadedKey == BT_USE))
            Break;
        if((FirstRun == 1) && (ReadedKey != BT_USE))
            FirstRun = 0;
    }

    HudMessage(s: ""; HUDMSG_PLAIN, -10000000, 0, 0.5, 0.8, 1);
    HudMessage(s: ""; HUDMSG_PLAIN, -10000001, 0, 0.5, 0.8, 1);
    SetPlayerProperty(0, False, PROP_TOTALLYFROZEN);
}

Script "lockwindow"(str Text, str Password, int ScriptNumber) {
    ScriptCall("DoorCodeInputActor", "DoorCode", Text, Password, ScriptNumber);
    Delay(2);
}

Script "drpgquake"(int time, int intensivity) {
    ACS_Execute(3008, 0, time, intensivity);
    if(GetCVar("drrp_debug_mode")) Print(s:"[DEBUG]: Using DEPRECATED Script drpgquake");
}

Script "transformation"(int tid, int timedelay) {
    if(GetCVar("drrp_debug_mode")) Print(s:"[DEBUG]: Using correct Script transformation");
    if(tid < 0) tid *= -1;

    SetActorState(tid, "Turn");
    Delay(timedelay || 2);
}

#define NUM_POM_TEXTURES 55
str POM_TEXTURES[NUM_POM_TEXTURES] = {
    "DRDC1",
    "DRDC0",
    "DRDC24",
    "DRDC25",
    "DRDC26",
    "DRDC28",
    "DRDC34",
    "DRDC35",
    "DRDC42",
    "DRDC41", // Tunnels
    "DRDC41A",
    "DRDC43",
    "DRDC43A",
    "DRDC45",
    "DRDC45A",
    "DRDC47",
    "DRDC47A", // // Tunnels
    "DRDC44",
    "DRDC46",
    "DRDC48",
    "DRDC2",
    "DRDC3",
    "DRDC4",
    "DRDC5",
    "DRDC6",
    "DRDC9",
    "DRDC8",
    "DRDC27",
    "DRDC32",
    "RROCK04",
    "RROCK05",
    "RROCK06",
    "RROCK07",
    "RROCK08",
    "DRDC11",
    "DRDC12",
    "SC77_01",
    "MFLR8_1",
    "METAL1",
    "DRDC39",
    "DRDC40",
    // Computers
    "DRDC30",
    "DRDC31",
    "CGR_CAPT",
    "CGR_CRSR",
    "CGR_EMPT",
    "CGR_LC1",
    "CGR_MSG",
    "CGR_OFF",
    "CGR_TXT1",
    "CGR_UAC",
    "CGR_M1A",
    "CGR_M2A",
    "CGR_M2B",
    "compam"
};

Script "updateshaders" (bool forced) ENTER {
    bool isHelmetEnabled = GetCVar("drrp_enable_helmet_shader");
    bool isPomEnabled = GetCVar("drrp_enable_pom_shader");

    if(!isPomEnabled) {
        for(int i = 0; i < NUM_POM_TEXTURES; i++) {
            ReplaceTextures(POM_TEXTURES[i], StrParam(s:"NP_", s:POM_TEXTURES[i]));
        }
    } else if(forced) { // Only if called from menudef
        for(int i = 0; i < NUM_POM_TEXTURES; i++) {
            ReplaceTextures(StrParam(s:"NP_", s:POM_TEXTURES[i]), POM_TEXTURES[i]);
        }
    }

    ScriptCall("ShaderControllerActor", "SetEnabled", 0, "HelmetShader", isHelmetEnabled);

    ACS_NamedExecuteAlways("onCinematicShadersReload", 0, forced);
}

// This hook called on change cinematic shaders' CVAR
// Redefine it in your map
Script "onCinematicShadersLoad" (bool forced) {
    if(GetCVar("drrp_debug_mode")) Print(s:"[DEBUG]: Using DEFAULT Script onCinematicShadersUnload");
}

Script "onCinematicShadersUnload" (bool forced) {
    if(GetCVar("drrp_debug_mode")) Print(s:"[DEBUG]: Using DEPRECATED Script onCinematicShadersUnload");
    ScriptCall("ShaderControllerActor", "SetEnabled", 0, "RadialBlurShader", false);
}

#define CINEMATIC_SHADERS_COUNT 20
str CINEMATIC_SHADERS[] = { "RadialBlurShader", "TITLEMAP", "INTRO", "HUB", "SEC1",
                            "SEC2", "SEC3", "SEC4", "SEC5", "SEC6", "SEC7_BEFORE",
                            "SEC7_AFTER", "XHUB", "REAC", "HeatHaze", "FilmGrain",
                            "XHUBGrain", "DefaultLut", "BCFilter", "DoubleVisionShader" };

// This hook must not be redefined but it can be.
// Using to disable all cinematic shaders and (if they're enabled) enable map specific ones.
Script "onCinematicShadersReload" (bool forced) {
    if(GetCVar("drrp_debug_mode")) Print(s:"[DEBUG]: Using correct Script onCinematicShadersReload");

    // Disable all cinematic shaders
    for(int i = 0; i < CINEMATIC_SHADERS_COUNT; i++) {
        ScriptCall("ShaderControllerActor", "SetEnabled", 0, CINEMATIC_SHADERS[i], false);
    }

    ACS_NamedExecute("playerDamageTimer", 0); // Recalculate damage shader

    // Enable map specific ones if cinematic shader support is enabled
    if(GetCVar("drrp_enable_cinematic_shader")) ACS_NamedExecuteAlways("onCinematicShadersLoad", 0, forced);
}

float playerDamageTimer = 0;

// NOTE: This script must be executed as ACS_NamedExecuteAlways
Script "onPlayerDamage" (void) {
    // TODO: Use player health
    // But we can't get the max player's HP from here :(
    // OK: Enable shader
    ScriptCall("ShaderControllerActor", "SetEnabled", PlayerNumber(), "DoubleVisionShader", true);
    // OK: Timed disable shader
    playerDamageTimer += 5.0;
    ACS_NamedExecute("playerDamageTimer", 0);
}

const int PLAYER_DAMAGE_TICK_VALUE = 3;

// This script decreases the playerDamageTimer value and intensivity of the damage shader
Script "playerDamageTimer" (void) {
    while (playerDamageTimer > 0) {
        playerDamageTimer -= 1.0;
        // OK: Set shader intensivity related to the damage value and the player's health

        ScriptCall("ShaderControllerActor", "SetUniformFloat", PlayerNumber(), "DoubleVisionShader",
                    "distortion", fclamp(playerDamageTimer, 1.0, 5.0));

        Delay(PLAYER_DAMAGE_TICK_VALUE);
    }

    ScriptCall("ShaderControllerActor", "SetEnabled", PlayerNumber(), "DoubleVisionShader", false);
}

/**
 * RPG System
 */

enum RPGGetFeatureTypes {
    RPG_Level,
    RPG_Experience,
    RPG_NextLevelXP,

    RPG_MaxHealth,
    RPG_MaxArmor,

    RPG_Accuracy,
    RPG_Agility,
    RPG_Defense,
    RPG_Strength
};

Script "LevelStatsNotifier" ENTER {
    int  monsterstotal,
         secretstotal       = GetLevelInfo(LEVELINFO_TOTAL_SECRETS);

    bool monsters = false,
         secrets  = false;

    if (secretstotal == 0)  secrets = true;

    while (true) {
        monsterstotal       = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS);

        int monsterskilled  = GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
        int secretsfound    = GetLevelInfo(LEVELINFO_FOUND_SECRETS);

        if (monsterstotal && monsterskilled == monsterstotal && !monsters) {
            SetFont("BIGFONT");
            HudMessage(l:"DRRP_D_ACH_MONSTERS"; HUDMSG_TYPEON | HUDMSG_LOG, 18, CR_GRAY, 1.5, 0.82, 3.0, 0.005, 1.0);
            LocalAmbientSound("COMPLETE", 115);
            monsters = true;
            ScriptCall("DRRPPlayer", "SetFeature", RPG_Experience, ScriptCall("DRRPPlayer", "GetFeature", RPG_Experience) + 10);
        }

        if (secretsfound == secretstotal && !secrets) {
            SetFont("BIGFONT");
            HudMessage(l:"DRRP_D_ACH_SECRETS"; HUDMSG_TYPEON | HUDMSG_LOG, 18, CR_GRAY, 1.5, 0.82, 3.0, 0.005, 1.0);
            LocalAmbientSound("SECRETS", 115);
            secrets = true;
            ScriptCall("DRRPPlayer", "SetFeature", RPG_Experience, ScriptCall("DRRPPlayer", "GetFeature", RPG_Experience) + 10);
        }

        if (monsters && secrets) {
            ScriptCall("DRRPPlayer", "SetFeature", RPG_Experience, ScriptCall("DRRPPlayer", "GetFeature", RPG_Experience) + 25);
            GiveInventory("Credit", 25);
            break;
        };

        Delay(17);
    }
}

const int RPG_DAMAGE_STRENGTH_MULTIPLIER = 1; // Per strength value

Script "getRPGAttackDamage" (int min, int max) {
    if (GetCVar("drrp_debug_mode")) Log(s:"getRPGAttackDamage(", i:min, s:", ", i:max, s:")");
    if (min == 0 && GetCVar("drrp_debug_mode")) Print(s:"[BUG]: getRPGDamage(0)");
    if (max == 0) max = min;

    int damageMultiplier = ScriptCall("DRRPPlayer", "GetFeature", RPG_Strength) * RPG_DAMAGE_STRENGTH_MULTIPLIER;

    int damage = random(min + damageMultiplier,
                        max + damageMultiplier);

    if (GetCVar("drrp_debug_mode")) Log(s:"Attack Damage: ", i:damage);

    SetResultValue(damage);
}

const str DOGNAMES[] = { "HellHound", "Cerberus", "DemonWolf" };

Script "getRPGDefenseDamage" (int damage) {
    if (GetCVar("drrp_debug_mode")) Log(s:"Defense Damage: ", i:damage);


    if (GetWeapon() == "DRRPAxe") {
        ActivatorSound("weapon/axe/block", 127);
        SetResultValue(damage / 2);
        Terminate;
    }

    // Test for dogs
    for (int i = 0; i < 3; i ++) {
        if (GetWeapon() == StrParam(s:DOGNAMES[i], s:"Gun")) {
            ActivatorSound("monsters/hellhound/pain", 127);
            TakeInventory(StrParam(s:DOGNAMES[i], s:"Health"), damage);

            if (CheckInventory(StrParam(s:DOGNAMES[i], s:"Health")) == 0) {
                TakeInventory(StrParam(s:DOGNAMES[i], s:"Gun"), 1);
                ActivatorSound("monsters/hellhound/death", 127);
            }

            SetResultValue(0);
            Terminate;
        }
    }

    SetResultValue(damage);
}

Script "levelUp" (bool windowOnly) { // You can use it by the "pukename levelup" command
    int pLevel = ScriptCall("DRRPPlayer", "GetFeature", RPG_Level);

    if (!windowOnly) {
        pLevel++;
        ScriptCall("DRRPPlayer", "SetFeature", RPG_Level, pLevel);
    }

    ActivatorSound("player/levelup", 127);
    ACS_NamedExecuteWait("window", 0, StrParam(
        s:"- ", l:"DRRP_B_ID78", s:" -\n",  // Level up!
        l:"DRRP_B_ID76", i:pLevel, s:"\n",  // Level:
        l:"DRRP_B_ID74", i:4, s:"\n",       // Max Health:
        l:"DRRP_B_ID72", i:4, s:"\n",       // Max Armor:
        l:"DRRP_B_ID73", i:2, s:"\n",       // Defense:
        l:"DRRP_B_ID75", i:2, s:"\n",       // Strength:
        l:"DRRP_B_ID71", i:1, s:"\n",       // Accuracy:
        l:"DRRP_B_ID70", i:1, s:"\n\n",     // Agility:
        l:"DRRP_B_ID77"));                  // Helath restored.
}

#include "inc_flashlight.acs"
#include "inc_mapapis.acs"
