/**
 * Copyright (c) 2018-2019 DRRP-Team
 *
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */

enum RPGGetFeatureTypes {
    _RPG_FirstStat = 0,

    RPG_Level = _RPG_FirstStat,
    RPG_Experience,
    RPG_NextLevelXP,
    RPG_MaxHealth,
    RPG_MaxArmor,
    RPG_Accuracy,
    RPG_Agility,
    RPG_Defence,
    RPG_Strength,

    _RPG_Quantity
}


class RPGSystemHandler: EventHandler {

    override void OnRegister() {
        SetOrder( 670 );
    }


    static String squeezeVector3( vector3 vec ) {
        return "(" .. int( vec.x ) .. ", " .. int( vec.y ) .. ", " .. int( vec.z ) .. ")";
    }


    /* Monsters and crates random death drop data and chooser. */

    // RandomSpawner has no master field by default, so we're spawn 
    //slightly extended RandomSpawner actor in the "WorldThingDamaged()".

    const DDGI_DefaultMonster   = "NULL, DRRPGeneralRandomSpawner";
    const DDGI_DefaultMonster_C = "50, 100"; // 150% as 40%+20% == 60%.


    const DDGI_Zombieman   = "Clips4xSpawner, DRRPShell, DRRPClip, " .. DDGI_DefaultMonster;
    const DDGI_Zombieman_C = "6, 30, 64, " .. DDGI_DefaultMonster_C;

    const DDGI_Chaingunner   = "Clips4xSpawner, DRRPClip, " .. DDGI_DefaultMonster;
    const DDGI_Chaingunner_C = "33, 67, " .. DDGI_DefaultMonster_C;

    const DDGI_Cacodemon   = "LargeMedikit, SmallMedikit, " .. DDGI_DefaultMonster;
    const DDGI_Cacodemon_C = "6, 94, " .. DDGI_DefaultMonster_C;

    const DDGI_PainElemental   = "GoldCredit, " .. DDGI_DefaultMonster;
    const DDGI_PainElemental_C = "100, " .. DDGI_DefaultMonster_C;

    const DDGI_Revenant   = "Rockets4xSpawner, RocketAmmo, " .. DDGI_DefaultMonster;
    const DDGI_Revenant_C = "6, 94, " .. DDGI_DefaultMonster_C;

    const DDGI_Fatso   = "Cells4xSpawner, DRRPCell, " .. DDGI_DefaultMonster;
    const DDGI_Fatso_C = "6, 94, " .. DDGI_DefaultMonster_C;

    const DDGI_ArchVile   = "GoldCredit, LargeMedikit, SmallMedikit, " .. DDGI_DefaultMonster;
    const DDGI_ArchVile_C = "30, 4, 66, " .. DDGI_DefaultMonster_C;

    const DDGI_Baron   = "Cells4xSpawner, Shells4xSpawner, " .. DDGI_DefaultMonster;
    const DDGI_Baron_C = "30, 70, " .. DDGI_DefaultMonster_C;


    const DDGI_Crate   = "NULL, DRRPExplosion, Credit, GoldCredit, " ..
                         "DRRPClip, DRRPShell, RocketAmmo, DRRPCell, Balloon, " ..
                         "Clips4xSpawner, Shells4xSpawner, Cells4xSpawner, Balloons4xSpawner, " ..
                         "SmallMedikit, LargeMedikit, DRRPArmorShard, DRRPHealthVial";
    const DDGI_Crate_C = "1,5,3,3 , 5,5,3,3,2 , 1,1,1,1 , 5,1,5,5";

    // 4 debug:
    /*const DDGI_DefaultMonster = "SmallMedikit, LargeMedikit, DRRPArmorShard, DRRPHealthVial";
    const DDGI_DefaultMonster_C = "5,1,5,5";
    const DDGI_Crate = "Credit, GoldCredit, DRRPShell";
    const DDGI_Crate_C = "50, 1, 50";/* */

    virtual Name deathDropGetName( String rawlist, String rawchancelist = "" ) {
        Array<String> itemlist;
        Name outItem = "";

        rawlist.Replace( " ", "" );
        rawchancelist.Replace( " ", "" );

        if ( rawlist != "" ) {
            rawlist.Split( itemlist, "," );

            if ( rawchancelist != "" ) {
                Array<String> chanceliststr;    // Chances (in string format);
                Array<uint> chancelist;         // Chances (in integer format).
                uint maxchance = 0, i;
                int curchance;

                // Граф, если уж делаешь ".split()", то делай и что-нибудь типа ".map()"!
                rawchancelist.Split( chanceliststr, "," );

                //console.printf( " ------------ Bfr rotation. i is NaN; sizes: " .. chanceliststr.Size() .. "/" .. itemlist.Size() );

                if ( chanceliststr.Size() == itemlist.Size() ) {

                    // Chances string-to-int unparsing and initialisation.
                    chancelist.Resize( chanceliststr.Size() );
                    for ( i = 0; i < chancelist.Size(); i++ ) {
                        maxchance += ( chancelist[ i ] = chanceliststr[ i ].ToInt( 10 ) );
                        //console.printf( "Init chances . #" .. i .. ", chancelist[ " .. i .. " ]: " .. chancelist[ i ] .. ", maxchance: " .. maxchance );
                    }

                    // Random item selection based on chances.
                    for ( i = 0, curchance = Random( 0, maxchance ); curchance > 0 && i < chancelist.Size(); ) {
                        //console.printf( "Random rotate. #" .. i .. ", (cur)" .. curchance .. " - (chan[i])" .. chancelist[ i ] .. " == (newcur)" .. curchance - chancelist[ i ] );
                        curchance -= chancelist[ i ];

                        if ( curchance > 0 )
                            i++;
                    }

                    //console.printf( "End rotation. #" .. i .. ", (cur)" .. curchance );
                    //for ( int j = 0; j < itemlist.Size(); j++ ) console.printf( "itemlist[ " .. j .. " ]: " .. itemlist[ j ] );

                    outItem = itemlist[ i ];                                // Default behaviour.
                } else
                    outItem = itemlist[ Random( 0, itemlist.Size() - 1 ) ]; // Different sizes: chanceliststr != itemlist.
            } else
                outItem = itemlist[ Random( 0, itemlist.Size() - 1 ) ];     // No raw chances list string.
        }

        return outItem;
    } // of virtual Name deathDropGetName( String rawlist, String rawchancelist = "" ) {

    /* Obtaining units of experience by some types of DRRP-actors when it spawns. */
    Actor worldThingSpawnedActor;

    virtual void setDRRPDeathDataItem( int expGain, String deathDropNames = "", String deathDropChances = "" ) {
        DRRPDeathDataItem deathData = NULL;
        Actor thing = worldThingSpawnedActor;
        bool mustDropItems = ( deathDropNames != "" );

        if ( thing ) {
            thing.A_SetInventory( "DRRPDeathDataItem", 1 );
            deathData = DRRPDeathDataItem( thing.FindInventory( "DRRPDeathDataItem" ) );

            if ( deathData ) {
                if ( mustDropItems )
                    deathData.DRRPDropItem = deathDropGetName( deathDropNames, deathDropChances );
                deathData.ExpGain = expGain;
            }
        }


        CVar debugCVar = CVar.GetCVar( "drrp_debug_mode", players[ consoleplayer ] );

        if ( debugCVar && debugCVar.GetBool() ) {
            String debugMessage = "";

            if ( !thing ) {
                debugMessage = TEXTCOLOR_FIRE .. "Warning: no thing";
            } else if ( !deathData ) {
                debugMessage = TEXTCOLOR_FIRE .. "Warning: no deathData item";
            } else {
                debugMessage = String.Format( "%-30s", thing.GetClassName() .. " at " .. squeezeVector3( thing.pos ) ) .. ": " .. TEXTCOLOR_SAPPHIRE .. "exp "
                    .. deathData.ExpGain .. "\c-, " .. TEXTCOLOR_TEAL .. "DropItem " .. ( deathData.DRRPDropItem? ( TEXTCOLOR_ICE .. deathData.DRRPDropItem.GetClassName() ) : "NULL" ) .. "\c-";
            }

            console.printf( TEXTCOLOR_DARKGRAY .. "RPGHndlr::setDeathData(). \c-" .. debugMessage .. "\c-." );
        }

    } // of virtual void setDRRPDeathDataItem( Actor thing, int expGain, String deathDropNames, String deathDropChances ) {

    override void WorldThingSpawned( WorldEvent e ) {
        worldThingSpawnedActor = e.Thing;

        if ( e.Thing is 'DRRPFire' )
            setDRRPDeathDataItem( 1 );
        else if ( e.Thing is 'DRRPCrate' )
            setDRRPDeathDataItem( 2, DDGI_Crate, DDGI_Crate_C );
        else if ( e.Thing is 'DRRPRod' )
            setDRRPDeathDataItem( 35 );
        else if ( e.Thing is 'DRRPRodTrash' )
            setDRRPDeathDataItem( 7 );
        else if ( e.Thing is 'DRRPBarrel' || e.Thing is 'DRRPSink' || e.Thing is 'DRRPToilet' )
            setDRRPDeathDataItem( 1 );
        else if ( e.Thing.bIsMonster && !e.Thing.bCorpse ) {

            // Monsters handling.
            double multiplier =
                ( e.Thing.health < 40 )?  FRandom( 0.02, 0.2 ) :
                ( e.Thing.health < 160 )? FRandom( 0.016, 0.17 ) :
                ( e.Thing.health < 300 )? FRandom( 0.013, 0.15 ) :
                FRandom( 0.01, 0.13 );

            String dropItems = DDGI_DefaultMonster, dropChances = DDGI_DefaultMonster_C;

            if ( e.Thing is 'ZombieMan_BaseDRRP' || e.Thing is 'ShotgunGuy_BaseDRRP' ) {
                dropItems   = DDGI_Zombieman;
                dropChances = DDGI_Zombieman_C;
            } else if ( e.Thing is 'ChaingunGuy_BaseDRRP' ) {
                dropItems   = DDGI_Chaingunner;
                dropChances = DDGI_Chaingunner_C;
            } else if ( e.Thing is 'Cacodemon_BaseDRRP' ) {
                dropItems   = DDGI_Cacodemon;
                dropChances = DDGI_Cacodemon_C;
            } else if ( e.Thing is 'Revenant_BaseDRRP' ) {
                dropItems   = DDGI_Revenant;
                dropChances = DDGI_Revenant_C;
            } else if ( e.Thing is 'PainElemental_BaseDRRP' ) {
                dropItems   = DDGI_PainElemental;
                dropChances = DDGI_PainElemental_C;
            } else if ( e.Thing is 'Fatso_BaseDRRP' ) {
                dropItems   = DDGI_Fatso;
                dropChances = DDGI_Fatso_C;
            } else if ( e.Thing is 'ArchVile_BaseDRRP' ) {
                dropItems   = DDGI_ArchVile;
                dropChances = DDGI_ArchVile_C;
            } else if ( e.Thing is 'BaronOfHell_BaseDRRP' || e.Thing is 'HellKnight_BaseDRRP' ) {
                dropItems   = DDGI_Baron;
                dropChances = DDGI_Baron_C;
            } else if ( e.Thing is 'Dog_BaseDRRP' || e.Thing is 'DRRPCyberdemon' || e.Thing is 'Kronos' ) {
                dropItems   = "";
                dropChances = "";
            } // All other monsters has only default death drop items.

            setDRRPDeathDataItem( 1 + ( int( multiplier * e.Thing.health ) ), dropItems, dropChances );
        } // of else if ( e.Thing.bIsMonster && !e.Thing.bCorpse ) {

        worldThingSpawnedActor = NULL;

        Super.WorldThingSpawned( e );
    } // of override void WorldThingSpawned( WorldEvent e ) {

    static void DoRPGDeath( Actor deadActor, Actor damageSource ) {
        DRRPDeathDataItem deathData = DRRPDeathDataItem( deadActor.FindInventory( "DRRPDeathDataItem" ) );

        // Experience drop.
        if ( damageSource is "DoomRPGPlayer" ) {
            DRRPPlayer player = DRRPPlayer( damageSource );

            // There's automatic call "netevent DRRP_Exp_Check" under "SetFeature()".
            if ( deathData ) {
                player.AddFeature( RPG_Experience, deathData.ExpGain, true );
            }
        }

        // Items drop.
        if ( deathData && deathData.DRRPDropItem ) {
            Actor droppedItem = deadActor.Spawn( deathData.DRRPDropItem, deadActor.pos );
            droppedItem.ChangeTid(14522);
            droppedItem.master = deadActor;
            droppedItem.vel = ( FRandom( -2.0, 2.0 ), FRandom( -2.0, 2.0 ), FRandom( 0.5, 4.0 ) );
        }
    }

    /* Give xp to killer player and drop random items on some DRRP actors death. */
    override void WorldThingDamaged( WorldEvent e ) {
        if ( e.Thing && e.Inflictor && e.DamageSource ) {
            if ( e.Thing.health <= 0 ) {
                DoRPGDeath( e.Thing, e.DamageSource );

                CVar debugCVar = CVar.GetCVar( "drrp_debug_mode", players[ consoleplayer ] );
                if ( debugCVar && debugCVar.GetBool() )
                    console.printf( TEXTCOLOR_DARKGRAY .. "RPGHndlr::ThingDamaged(). \c-Call to DoRGPDeath( \cUvictim\c- " .. e.Thing.GetClassName() .. TEXTCOLOR_OLIVE .. " at " .. squeezeVector3( e.Thing.pos ) .. "\c-, \cUattacker\c- " .. e.DamageSource.GetClassName() .. " )." );
            }
        }

        Super.WorldThingDamaged( e );
    } // override void WorldThingDamaged( WorldEvent e ) {


    override void NetworkProcess( ConsoleEvent e ) {

        // "netevent DRRP_LevelUp_Attributes 0 1" forces level up (for the 0th (1st) player).
        if ( e.Name ~== "DRRP_LevelUp_Attributes" ) {
            if ( ( e.Args[ 0 ] < 0 ) || ( e.Args[ 0 ] > MAXPLAYERS ) || !playeringame[ e.Args[ 0 ] ] )
                return;

            DRRPPlayer player = DRRPPlayer( players[ e.Args[ 0 ] ].mo );

            if ( ( player.GetFeature( RPG_Experience ) >= player.GetFeature( RPG_NextLevelXP ) ) || e.Args[ 1 ] == 1 ) {
                player.AddAllPlayerLevelupStats();
                player.SetAllPlayerLevelupFeatures();
                player.ACS_ScriptCall( "levelUp", true );
            }

        } else if ( e.name ~== "DRRP_Exp_Check" ) {
            if ( ( e.Args[ 0 ] < 0 ) || ( e.Args[ 0 ] > MAXPLAYERS )  || !playeringame[ e.Args[ 0 ] ] )
                return;

            DRRPPlayer player = DRRPPlayer( players[ e.Args[ 0 ] ].mo );

            if ( player.GetFeature( RPG_Experience ) >= player.GetFeature( RPG_NextLevelXP ) )
                EventHandler.SendNetworkEvent( "DRRP_LevelUp_Attributes", e.Args[ 0 ] );

        } else if ( e.name ~== "DRRP_Levelfreeze" ) {
            ConversationController.SetGlobalfreeze( !!e.args[ 0 ] );
        }

        Super.NetworkProcess( e );
    } // override void NetworkProcess( ConsoleEvent e ) {

} // of class RPGSystemHandler: EventHandler {



class DRRPDeathDataItem: Inventory {
    int ExpGain;
    class<Actor> DRRPDropItem;

    Default {
        Inventory.Amount 1;
        Inventory.MaxAmount 65535;
    }
}

class DRRPDamageAbsorber: Inventory {
    Default {
        +Inventory.UNDROPPABLE;
        +Inventory.KEEPDEPLETED;
        Inventory.MaxAmount 1;
        Inventory.Amount 1;
    }

    override void AbsorbDamage( int damage, Name damageType, out int newdamage ) {
        if ( !owner || !( owner is "DoomRPGPlayer" ) )
            return;

        Inventory armor = DRRPPlayer( owner ).FindInventory( "DRRPBasicArmor" );

        if ( armor ) {
            if ( ( newdamage = DRRPPlayer( owner ).getRPGDefenceDamage( damage, damageType ) ) == damage )
                armor.Amount -= damage / 2;
            else
                armor.Amount -= damage - newdamage;
            if ( armor.Amount < 0 )
                armor.Amount = 0;
        } else
            newdamage = DRRPPlayer( owner ).getRPGDefenceDamage( damage, damageType );

        CVar DebugCVar = CVar.GetCVar( "drrp_debug_mode", players[ consoleplayer ] );

        if ( DebugCVar && DebugCVar.GetBool() ) {
            String armorStrPlaceholder = ( armor? ( "-(armor amount " .. armor.Amount .. ")->" ) : "-(no armor)->" );
            console.printf( TEXTCOLOR_DARKGRAY .. "#" .. self.GetClassName() .. "::AbsorbDamage aft. \c-Damage " .. damage .. armorStrPlaceholder .. TEXTCOLOR_RED .. newdamage .. "\c-." );
        }
    }
} // of class DRRPDamageAbsorber: Inventory {

class DRRPBasicArmor: Armor {
    Default {
        Inventory.MaxAmount 30;
        Inventory.Amount 1;
    }

    override void PostBeginPlay() {
        if ( !owner || !( owner is "DoomRPGPlayer" ) ) {
            Destroy();
            return;
        }
        self.MaxAmount = DRRPPlayer( owner ).GetFeature( RPG_MaxArmor );
    }
}

class DRRPShopPlayerAccuracy: Inventory {
    uint8 thisFeatureType;

    Default {
        Inventory.Amount 1;
        Inventory.MaxAmount 511; // When ( Amount & 256 != 0 ), decrase value of the feature.
    }

    override void BeginPlay() {
        thisFeatureType = RPG_Accuracy;
    }

    override void PostBeginPlay() {
        if ( owner && owner is "DRRPPlayer" ) {
            DRRPPlayer( owner ).SetFeature( thisFeatureType,
                    DRRPPlayer( owner ).GetFeature( thisFeatureType ) + ( Amount & 0x100? -Amount : Amount ) );
        }

        Destroy();
        DetachFromOwner();
        Super.PostBeginPlay();
    }
}

class DRRPShopPlayerAgility: DRRPShopPlayerAccuracy {
    override void BeginPlay() {
        thisFeatureType = RPG_Agility;
    }
}

class DRRPShopPlayerDefense: DRRPShopPlayerAccuracy {
    override void BeginPlay() {
        thisFeatureType = RPG_Defence;
    }
}

class DRRPShopPlayerStrength: DRRPShopPlayerAccuracy {
    override void BeginPlay() {
        thisFeatureType = RPG_Strength;
    }
}
