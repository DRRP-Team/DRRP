/**
 * Copyright (c) 2018-2019 DRRP-Team
 *
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */


class RPGSystemHandler: EventHandler {

    override void OnRegister() {
        SetOrder( 670 );
    }


    /* Monsters and crates random death drop data and chooser. */
    const DDGI_DefaultMonster = "NULL, Credit, GoldCredit, " ..
                                "DRRPClip, DRRPShell, RocketAmmo, DRRPCell, Balloon, " ..
                                "Clips4xSpawner, Shells4xSpawner, Cells4xSpawner, Balloons4xSpawner, " ..
                                "SmallMedikit, LargeMedikit, DRRPArmorShard, DRRPHealthVial";
    const DDGI_DefaultMonster_C = "1,5,3 , 5,5,3,3,2 , 1,1,1,1 , 5,1,5,5";
    const DDGI_Crate = DDGI_DefaultMonster .. ", DRRPExplosion";
    const DDGI_Crate_C = DDGI_DefaultMonster_C .. ", 3";/* */

    // 4 debug:
    /*const DDGI_DefaultMonster = "SmallMedikit, LargeMedikit, DRRPArmorShard, DRRPHealthVial";
    const DDGI_DefaultMonster_C = "5,1,5,5";
    const DDGI_Crate = "Credit, GoldCredit, DRRPShell";
    const DDGI_Crate_C = "50, 1, 50";/* */

    virtual Name deathDropGetName( String rawlist, String rawchancelist = "" ) {
        Array<String> itemlist;
        Name outItem = "";

        rawlist.Replace( " ", "" );
        rawchancelist.Replace( " ", "" );

        if ( rawlist != "" ) {
            rawlist.Split( itemlist, "," );

            if ( rawchancelist != "" ) {
                Array<String> chanceliststr;    // Chances (in string format);
                Array<uint> chancelist;         // Chances (in integer format).
                uint maxchance = 0, i;
                int curchance;

                // Граф, если уж делаешь ".split()", то делай и что-нибудь типа ".map()"!
                rawchancelist.Split( chanceliststr, "," );

                //console.printf( " ------------ Bfr rotation. i is NaN; sizes: " .. chanceliststr.Size() .. "/" .. itemlist.Size() );

                if ( chanceliststr.Size() == itemlist.Size() ) {

                    // Chances string-to-int unparsing and initialisation.
                    chancelist.Resize( chanceliststr.Size() );
                    for ( i = 0; i < chancelist.Size(); i++ ) {
                        maxchance += ( chancelist[ i ] = chanceliststr[ i ].ToInt( 10 ) );
                        //console.printf( "Init chances . #" .. i .. ", chancelist[ " .. i .. " ]: " .. chancelist[ i ] .. ", maxchance: " .. maxchance );
                    }

                    // Random item selection based on chances.
                    for ( i = 0, curchance = Random( 0, maxchance ); curchance > 0 && i < chancelist.Size(); ) {
                        //console.printf( "Random rotate. #" .. i .. ", (cur)" .. curchance .. " - (chan[i])" .. chancelist[ i ] .. " == (newcur)" .. curchance - chancelist[ i ] );
                        curchance -= chancelist[ i ];

                        if ( curchance > 0 )
                            i++;
                    }

                    //console.printf( "End rotation. #" .. i .. ", (cur)" .. curchance );
                    //for ( int j = 0; j < itemlist.Size(); j++ ) console.printf( "itemlist[ " .. j .. " ]: " .. itemlist[ j ] );

                    outItem = itemlist[ i ];                                // Default behaviour.
                } else
                    outItem = itemlist[ Random( 0, itemlist.Size() - 1 ) ]; // Different sizes: chanceliststr != itemlist.
            } else
                outItem = itemlist[ Random( 0, itemlist.Size() - 1 ) ];     // No raw chances list string.
        }

        return outItem;
    } // of virtual Name deathDropGetName( String rawlist, String rawchancelist = "" ) {

    /* Obtaining units of experience by some types of DRRP-actors when it spawns. */
    Actor worldThingSpawnedActor;

    virtual void setDRRPDeathDataItem( int expGain, String deathDropNames = "", String deathDropChances = "" ) {
        DRRPDeathDataItem deathData = NULL;
        Actor thing = worldThingSpawnedActor;
        bool mustDropItems = ( deathDropNames != "" );

        if ( thing ) {
            thing.A_SetInventory( "DRRPDeathDataItem", 1 );
            deathData = DRRPDeathDataItem( thing.FindInventory( "DRRPDeathDataItem" ) );

            if ( deathData ) {
                if ( mustDropItems )
                    deathData.DRRPDropItem = deathDropGetName( deathDropNames, deathDropChances );
                deathData.ExpGain = expGain;
            }
        }


        CVar DebugCVar = CVar.GetCVar( "drrp_debug_mode", players[ consoleplayer ] );

        if ( DebugCVar && DebugCVar.GetBool() ) {
            if ( !thing )
                console.printf( "#RPGSystemHandler::setDRRPDeathDataItem. Warning: no thing." );
            else if ( !deathData )
                console.printf( "#RPGSystemHandler::setDRRPDeathDataItem. Warning: no deathData item." );
            else
                console.printf( "#RPGSystemHandler::setDRRPDeathDataItem( Actor " .. thing.GetClassName()
                    .. " <" .. thing .. "> ). Death data: [ ExpGain: "
                    .. deathData.ExpGain .. ", DRRPDropItem: " .. deathData.DRRPDropItem .. " ]." );
        }

    } // of virtual void setDRRPDeathDataItem( Actor thing, int expGain, String deathDropNames, String deathDropChances ) {

    override void WorldThingSpawned( WorldEvent e ) {
        worldThingSpawnedActor = e.Thing;

        if ( e.Thing is 'DRRPFire' )
            setDRRPDeathDataItem( 1 );
        else if ( e.Thing is 'DRRPCrate' )
            setDRRPDeathDataItem( 2, DDGI_Crate, DDGI_Crate_C );
        else if ( e.Thing is 'DRRPRod' )
            setDRRPDeathDataItem( 35 );
        else if ( e.Thing is 'DRRPRodTrash' )
            setDRRPDeathDataItem( 7 );
        else if ( e.Thing is 'DRRPBarrel' )
            setDRRPDeathDataItem( 1 );
        else if ( e.Thing is 'DRRPSink' )
            setDRRPDeathDataItem( 1 );
        else if ( e.Thing is 'DRRPToilet' )
            setDRRPDeathDataItem( 1 );
        else if ( e.Thing.bIsMonster && !e.Thing.bCorpse ) {
            double multiplier =
                ( e.Thing.health < 40 )?  FRandom( 0.02, 0.2 ) :
                ( e.Thing.health < 160 )? FRandom( 0.016, 0.17 ) :
                ( e.Thing.health < 300 )? FRandom( 0.013, 0.15 ) :
                FRandom( 0.01, 0.13 );

            setDRRPDeathDataItem( 1 + ( int( multiplier * e.Thing.health ) ), DDGI_DefaultMonster, DDGI_DefaultMonster_C );
        }

        worldThingSpawnedActor = NULL;

        Super.WorldThingSpawned( e );
    } // of override void WorldThingSpawned( WorldEvent e ) {

    /* Give xp to killer player and drop random items on some DRRP actors death. */
    override void WorldThingDamaged( WorldEvent e ) {

        if ( e.Thing != NULL && e.Inflictor != NULL && e.DamageSource != NULL ) {

            if ( e.Thing.health <= 0 ) {
                DRRPDeathDataItem deathData = DRRPDeathDataItem( e.Thing.FindInventory( "DRRPDeathDataItem" ) );

                // Experience drop.
                if ( e.DamageSource is "DoomRPGPlayer" ) {

                    int playerNum = -1;
                    for ( int i = 0; i < MAXPLAYERS; i++ )
                        if ( players[ i ].mo == e.DamageSource ) {
                            playerNum = i;
                            break;
                        }

                    if ( ( playerNum < 0 ) || ( playerNum > MAXPLAYERS ) ) {
                        console.printf( "\034GWarning\034-: impossible value of player number (#RPGSystem::WorldThingDamaged)." );
                        return;
                    }
                    DRRPPlayer player = DRRPPlayer( players[ playerNum ].mo );

                    if ( deathData )
                        player.Experience += deathData.ExpGain;

                    // Levels up once. Is it better to write "while (...)"?
                    if ( player.Experience >= player.NextLevelXP )
                        EventHandler.SendNetworkEvent( "DRRP_LevelUp_Attributes", playerNum );
                }

                // Items drop.
                if ( deathData && deathData.DRRPDropItem ) {
                    Actor droppedItem = e.Thing.Spawn( deathData.DRRPDropItem, e.Thing.pos );
                    droppedItem.vel = ( FRandom( -2.0, 2.0 ), FRandom( -2.0, 2.0 ), FRandom( 0.5, 4.0 ) );
                }

            }
        } // of if ( e.Thing != NULL && e.Inflictor != NULL && e.DamageSource != NULL ) {

        Super.WorldThingDamaged( e );
    } // override void WorldThingDamaged( WorldEvent e ) {


    override void NetworkProcess( ConsoleEvent e ) {

        if ( e.Name ~== "DRRP_LevelUp_Attributes" ) {

            if ( ( e.Args[ 0 ] < 0 ) || ( e.Args[ 0 ] > MAXPLAYERS ) || !playeringame[ e.Args[ 0 ] ] )
                return;

            DRRPPlayer player = DRRPPlayer( players[ e.Args[ 0 ] ].mo );

            // It's better to sequentally call player.SetFeature()...
            player.Level       += 1;
            player.Agility     += 1;
            player.Accuracy    += 1;
            player.Strength    += 2;
            player.Defense     += 2;
            player.MaxHealth   += 4;
            player.MaxArmor    += 4;

            player.setAllPlayerLevelupFeatures();
            player.ACS_ScriptCall( "levelUp", true );

        } else if ( e.name ~== "DRRP_Exp_Check" ) {

            if ( ( e.Args[ 0 ] < 0 ) || ( e.Args[ 0 ] > MAXPLAYERS ) )
                return;
            DRRPPlayer player = DRRPPlayer( players[ e.Args[ 0 ] ].mo );

            if ( player.Experience >= player.NextLevelXP )
                EventHandler.SendNetworkEvent( "DRRP_LevelUp_Attributes", e.Args[ 0 ] );
        }

        Super.NetworkProcess( e );
    } // override void NetworkProcess( ConsoleEvent e ) {

} // of class RPGSystemHandler: EventHandler {



class DRRPDeathDataItem: Inventory {
    int ExpGain;
    class<Actor> DRRPDropItem;

    Default {
        Inventory.Amount 1;
        Inventory.MaxAmount 65535;
    }
}

class DRRPDamageAbsorber: Inventory {
    Default {
        +Inventory.UNDROPPABLE;
        +Inventory.KEEPDEPLETED;
        Inventory.MaxAmount 1;
        Inventory.Amount 1;
    }

    override void AbsorbDamage( int damage, Name damageType, out int newdamage ) {
        if ( !owner || !( owner is "DoomRPGPlayer" ) )
            return;

        Inventory armor = DRRPPlayer( owner ).FindInventory( "DRRPBasicArmor" );
        CVar DebugCVar = CVar.GetCVar( "drrp_debug_mode", players[ consoleplayer ] );

        if ( DebugCVar && DebugCVar.GetBool() )
            console.printf( "#" .. self.GetClassName() .. "::AbsorbDamage (Pre-damage). Armor amount: " .. armor.Amount .. "; damage: " .. damage .. "; type: " .. damageType .. "." );

        if ( armor ) {
            if ( ( newdamage = DRRPPlayer( owner ).getRPGDefenseDamage( damage, damageType ) ) == damage )
                armor.Amount -= damage / 2;
            else
                armor.Amount -= damage - newdamage;
            if ( armor.Amount < 0 )
                armor.Amount = 0;
        } else
            newdamage = DRRPPlayer( owner ).getRPGDefenseDamage( damage, damageType );

        if ( DebugCVar && DebugCVar.GetBool() )
            console.printf( "#" .. self.GetClassName() .. "::AbsorbDamage (Post-damage). Armor amount: " .. armor.Amount .. "; newdamage: " .. newdamage .. "." );
    }
}

class DRRPBasicArmor: Armor {
    Default {
        Inventory.MaxAmount 30;
        Inventory.Amount 1;
    }

    override void PostBeginPlay() {
        if ( !owner || !( owner is "DoomRPGPlayer" ) ) {
            Destroy();
            return;
        }
        self.MaxAmount = DRRPPlayer( owner ).GetFeature( RPG_MaxArmor );
    }
}

class DRRPShopPlayerAccuracy: Inventory {
    uint8 thisFeatureType;

    Default {
        Inventory.Amount 1;
        Inventory.MaxAmount 511; // When ( Amount & 256 != 0 ), decrase value of the feature.
    }

    override void BeginPlay() {
        thisFeatureType = RPG_Accuracy;
    }

    override void PostBeginPlay() {
        if ( owner && owner is "DRRPPlayer" ) {
            DRRPPlayer( owner ).SetFeature( thisFeatureType,
                    DRRPPlayer( owner ).GetFeature( thisFeatureType ) + ( Amount & 0x100? -Amount : Amount ) );
        }
        Destroy();
        DetachFromOwner();
        Super.PostBeginPlay();
    }
}

class DRRPShopPlayerAgility: DRRPShopPlayerAccuracy {
    override void BeginPlay() {
        thisFeatureType = RPG_Agility;
    }
}

class DRRPShopPlayerDefense: DRRPShopPlayerAccuracy {
    override void BeginPlay() {
        thisFeatureType = RPG_Defense;
    }
}

class DRRPShopPlayerStrength: DRRPShopPlayerAccuracy {
    override void BeginPlay() {
        thisFeatureType = RPG_Strength;
    }
}
