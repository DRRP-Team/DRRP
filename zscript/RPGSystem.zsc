/**
 * Copyright (c) 2018-2019 DRRP-Team
 *
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */


class RPGSystemHandler: EventHandler {
    override void OnRegister() {
        SetOrder( 670 );
    }


    static void setLevelFeatures( DRRPPlayer player ) {
        player.NextLevelXP += player.Level * 20;
    }

    static void setArmorFeatures( DRRPPlayer player ) {
        Inventory armor = player.FindInventory( "DRRPBasicArmor" );
        if ( armor ) armor.MaxAmount = player.MaxArmor;
    }

    static void setAccuracyFeatures( DRRPPlayer player ) {
    }

    static void setAgilityFeatures( DRRPPlayer player ) {
        player.ForwardMove1 = player.Agility * 0.025 + 0.6;
        player.ForwardMove2 = player.ForwardMove1 * 0.58333;
        player.SideMove1    = player.Agility * 0.025 + 0.55;
        player.SideMove2    = player.SideMove1 * 0.54545;
    }

    static void setDefenseFeatures( DRRPPlayer player ) {
    }

    static void setStrengthFeatures( DRRPPlayer player ) {
    }

    static void setHealthFeatures( DRRPPlayer player ) {
        player.A_GiveInventory( "DRRPHealthVial", 999 );
        player.MugShotMaxHealth = player.MaxHealth;
    }

    static void setAllFeatures( DRRPPlayer player ) {
        setLevelFeatures( player );
        setArmorFeatures( player );
        setAccuracyFeatures( player );
        setAgilityFeatures( player );
        setDefenseFeatures( player );
        setStrengthFeatures( player );
        setHealthFeatures( player );
    }


    const DDGI_DefaultMonster = "NULL, Credit, GoldCredit, " ..
								"Clip, DRRPShell, Rocket, Cell, Balloon, " ..
								"SmallMedikit, LargeMedikit, DRRPArmorShard, DRRPHealthVial";
    //const DDGI_DefaultMonster_C = "2,1,5,4,2";
    const DDGI_Crate = DDGI_DefaultMonster .. ", DRRPExplosion";

    virtual Name deathDropGetName( String rawlist, String rawchancelist = "" ) {
        Array<String> itemlist;
        Name outItem;

        rawlist.Replace( " ", "" );
        rawchancelist.Replace( " ", "" );

        if ( rawlist != "" ) {
            rawlist.Split( itemlist, "," );
            if ( rawchancelist != "" ) {
                Array<String> chanceliststr; // Граф, если уж делаешь ".split()", то делай и что-нибудь типа ".map()"!
                Array<uint> chancelist;
                uint maxchance = 0, curchance, i;

                rawchancelist.Split( chanceliststr, "," );

				if ( chanceliststr.Size() == itemlist.Size() ) {
	                for ( i = 0; i < chanceliststr.Size(); i++ )
	                    maxchance += ( chancelist[ i ] = chanceliststr[ i ].ToInt( 10 ) );

	                for ( i = 0, curchance = Random( 0, maxchance ); curchance > 0 && i < chancelist.Size(); i++, curchance -= chancelist[ i ] ) {}
	                outItem = itemlist[ i ];
				} else
					outItem = itemlist[ Random( 0, itemlist.Size() - 1 ) ];
            } else if ( rawlist == "" )
                outItem = "";
            else
                outItem = itemlist[ Random( 0, itemlist.Size() - 1 ) ];
        }

        return outItem;
    }

    override void WorldThingSpawned( WorldEvent e ) {
        if ( e.Thing is 'DRRPFire' )
            e.Thing.A_SetInventory( "ExpGain", 1 );
        else if ( e.Thing is 'DRRPCrate' )
            e.Thing.A_SetInventory( "ExpGain", 2 );
        else if ( e.Thing is 'DRRPRod' )
            e.Thing.A_SetInventory( "ExpGain", 35 );
        else if ( e.Thing is 'DRRPRodTrash' )
            e.Thing.A_SetInventory( "ExpGain", 7 );
        else if ( e.Thing is 'DRRPBarrel' )
            e.Thing.A_SetInventory( "ExpGain", 1 );
        else if ( e.Thing is 'DRRPSink' )
            e.Thing.A_SetInventory( "ExpGain", 1 );
        else if ( e.Thing is 'DRRPToilet' )
            e.Thing.A_SetInventory( "ExpGain", 1 );
        else if ( e.Thing.bIsMonster && !e.Thing.bCorpse ) {
            double multiplier =
                ( e.Thing.health < 40 )?  FRandom( 0.02, 0.2 ) :
                ( e.Thing.health < 160 )? FRandom( 0.016, 0.17 ) :
                ( e.Thing.health < 300 )? FRandom( 0.013, 0.15 ) :
                FRandom( 0.01, 0.13 );
            e.Thing.A_SetInventory( "ExpGain", 1 + ( int( multiplier * e.Thing.health ) ) );
        }
        CVar DebugCVar = CVar.GetCVar( "drrp_debug_mode", players[ consoleplayer ] );
        if ( DebugCVar && DebugCVar.GetBool() && e.Thing.FindInventory( "ExpGain" ) )
            console.printf( "#RPGSystemHandler::WorldThingSpawned( Actor &" .. e.Thing
                .. " <" .. e.Thing.GetClassName() .. "> ) amount of experience: "
                .. e.Thing.FindInventory( "ExpGain" ).Amount .. "." );
    }

    override void WorldThingDamaged( WorldEvent e ) {

        if ( e.Thing != NULL && e.Inflictor != NULL && e.DamageSource != NULL ) {

            if ( e.Thing.health <= 0 ) {
                // Experience drop.
                if ( e.DamageSource is "DoomRPGPlayer" ) {

                    int playerNum = -1;
                    for ( int i = 0; i < MAXPLAYERS; i++ )
                        if ( players[ i ].mo == e.DamageSource ) {
                            playerNum = i;
                            break;
                        }

                    if ( ( playerNum < 0 ) || ( playerNum > MAXPLAYERS ) ) {
                        console.printf( "\034GWarning\034-: impossible value of player number (#RPGSystem::WorldThingDamaged)." );
                        return;
                    }
                    DRRPPlayer player = DRRPPlayer( players[ playerNum ].mo );

                    Inventory gainExperience = e.Thing.FindInventory( "ExpGain" );
                    if ( gainExperience ) player.Experience += gainExperience.Amount;

                    if ( player.Experience >= player.NextLevelXP )
                        EventHandler.SendNetworkEvent( "DRRP_LevelUp_Attributes", playerNum );
                }

                // Items drop.
                Name dropitem = deathDropGetName( e.Thing.bISMONSTER? DDGI_DefaultMonster : ( e.Thing is "DRRPCrate"? DDGI_Crate : "" ) );
                if ( dropitem != "NULL" && dropitem != "" )
                    e.Thing.Spawn( dropitem, e.Thing.pos );
            }
        } // of if ( e.Thing != NULL && e.Inflictor != NULL && e.DamageSource != NULL ) {

    } // override void WorldThingDamaged( WorldEvent e ) {


    override void NetworkProcess( ConsoleEvent e ) {

        if ( e.Name ~== "DRRP_LevelUp_Attributes" ) {

            if ( ( e.Args[ 0 ] < 0 ) || ( e.Args[ 0 ] > MAXPLAYERS ) ) return;
            DRRPPlayer player = DRRPPlayer( players[ e.Args[ 0 ] ].mo );

            player.Level       += 1;
            player.Agility     += 1;
            player.Accuracy    += 1;
            player.Strength    += 2;
            player.Defense     += 2;
            player.MaxHealth   += 4;
            player.MaxArmor    += 4;

            setAllFeatures( player );
            player.ACS_ScriptCall( "levelUp", true );
        }

    } // override void NetworkProcess( ConsoleEvent e ) {
}


class DRRPDamageAbsorber: Inventory {
    Default {
        +Inventory.UNDROPPABLE;
        +Inventory.KEEPDEPLETED;
        Inventory.MaxAmount 1;
        Inventory.Amount 1;
    }

    override void AbsorbDamage( int damage, Name damageType, out int newdamage ) {
        if ( !Owner || !( Owner is "DoomRPGPlayer" ) )
            return;

        Inventory armor = DRRPPlayer( Owner ).FindInventory( "DRRPBasicArmor" );
        CVar DebugCVar = CVar.GetCVar( "drrp_debug_mode", players[ consoleplayer ] );

        if ( DebugCVar && DebugCVar.GetBool() )
            console.printf( "#" .. self.GetClassName() .. "::AbsorbDamage (Pre-damage). Armor amount: " .. armor.Amount .. "; damage: " .. damage .. "; type: " .. damageType .. "." );

        if ( armor ) {
            if ( ( newdamage = DRRPPlayer( Owner ).getRPGDefenseDamage( Owner, damage, damageType ) ) == damage )
                armor.Amount -= damage / 2;
            else
                armor.Amount -= damage - newdamage;
            if ( armor.Amount < 0 )
                armor.Amount = 0;
        } else
            newdamage = DRRPPlayer( Owner ).getRPGDefenseDamage( Owner, damage, damageType );

        if ( DebugCVar && DebugCVar.GetBool() )
            console.printf( "#" .. self.GetClassName() .. "::AbsorbDamage (Post-damage). Armor amount: " .. armor.Amount .. "; newdamage: " .. newdamage .. "." );
    }
}

class DRRPBasicArmor: Armor {
    Default {
        Inventory.MaxAmount 30;
        Inventory.Amount 1;
    }

    override void PostBeginPlay() {
        if ( !Owner || !( Owner is "DoomRPGPlayer" ) ) {
            Destroy();
            return;
        }
        self.MaxAmount = DRRPPlayer( Owner ).GetFeature( Owner, RPG_MaxArmor );
    }
}

class ExpGain: Inventory {
    Default {
        Inventory.Amount 1;
        Inventory.MaxAmount 65535;
    }
}

class DRRPShopPlayerAccuracy: Inventory {
    uint8 thisFeatureType;

    Default {
        Inventory.Amount 1;
        Inventory.MaxAmount 511; // When ( Amount & 256 != 0 ), decrase value of the feature.
    }

    override void BeginPlay() {
        thisFeatureType = RPG_Accuracy;
    }

    override void PostBeginPlay() {
        if ( Owner && Owner is "DRRPPlayer" ) {
            DRRPPlayer( Owner ).SetFeature( Owner, thisFeatureType,
                    DRRPPlayer( Owner ).GetFeature( Owner, thisFeatureType ) + ( Amount & 0x100? -Amount : Amount ) );
        }
        Destroy();
        DetachFromOwner();
        Super.PostBeginPlay();
    }
}

class DRRPShopPlayerAgility: DRRPShopPlayerAccuracy {
    override void BeginPlay() {
        thisFeatureType = RPG_Agility;
    }
}

class DRRPShopPlayerDefense: DRRPShopPlayerAccuracy {
    override void BeginPlay() {
        thisFeatureType = RPG_Defense;
    }
}

class DRRPShopPlayerStrength: DRRPShopPlayerAccuracy {
    override void BeginPlay() {
        thisFeatureType = RPG_Strength;
    }
}
