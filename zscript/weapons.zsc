/**
 * Copyright (c) 2017-2019 DRRP-Team
 * 
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */

class DRRPAxe: Weapon {
    Default {
        //$Category DWeapons
        +WEAPON.NOALERT;
        +WEAPON.NOAUTOFIRE;
        +WEAPON.MELEEWEAPON;
        Tag "$DRRP_W_AXE";
        Scale 0.65;
        Obituary "%o was chopped by %k";

        Inventory.PickupMessage "$DRRP_W_AXEPICKUP";
        Inventory.Icon "AXEIA0";
        Inventory.PickupSound "player/taunt";
        Weapon.SelectionOrder 90;
    }

    States {
        Spawn:
            AXEI A -1;
            Stop;
        Ready:
            GAXU A 1 A_PlaySound( "weapon/axe/swing", CHAN_WEAPON );
            GAXU CEGIKMOQSUWY 1;
            GAXR ACEG 1;
        AxeReady:
            GAXR I 1 A_WeaponReady;
            Loop;
        Select:
            TNT1 A 0 A_Raise( 99 );
            Loop;
        Deselect:
            GAXW ABC 2;
            GAXW DEF 1;
            TNT1 A 4;
        Deselect1:
            TNT1 A 0 A_Lower( 99 );
            Loop;
        Fire:
            GAXW ACJ 2;
            GAXW JLNQ 1;
            GAXW R 2 { pitch -= 0.3; }
        FireHold:
            GAXW R 2;
            GAXF A 2 A_Refire( "FireHold" );
            GAXF C 1 { pitch += 1.5; }
            GAXF F 1 { pitch += 1.5; S_Sound( "weapon/axe/swing", CHAN_WEAPON ); }
            GAXF FGG 1 { pitch += 1.5; }
            GAXF H 3 A_CustomPunch( DRRPPlayer( self ).getRPGAttackDamage( 3, 12 ), TRUE, 0, "DRRPAxePuff", 80, 0, 0, "ArmorBonus" );
            GAXF IK 1 { pitch += 1.5; }
            GAXD FED 1 { pitch -= 1.2; }
            GAXD CB 1 { pitch -= 1.6; }
            Goto AxeReady;
    }
}

class DRRPFireExt: Weapon {
    Default {
        Tag "$DRRP_W_FIREEXT";
        Obituary "%o was extinguished by %k";
        Scale 0.5;

        Inventory.Icon "FEXTI0";
        Inventory.PickupSound "misc/i_pkup";
        Inventory.Pickupmessage "$DRRP_W_FIREEXTPICKUP";
        Weapon.AmmoUse 1;
        Weapon.AmmoGive 40;
        Weapon.AmmoType "Balloon";
        Weapon.SelectionOrder 100;
        +SPECTRAL;
        DamageType "DRRPFireExtDmg";
    }

    override void Touch( Actor toucher ) {
        if ( !toucher.CheckInventory( self.GetClassName(), 1 ) )
            S_Sound( "voice/wtf" .. StringTable.Localize( "$DRRP_D_SOUND_SUFFIX" ), CHAN_VOICE );
        Super.Touch( toucher );
    }

    States {
        Ready: // Original sprite -- "DW2A"
            FIEX A 1 A_WeaponReady;
            Loop;
        Deselect:
            FIEX A 0 {
                ACS_NamedExecuteAlways("fireextfade", 0, 0);
                A_StopSound(CHAN_WEAPON);
            }
            FIEX A 1 A_Lower;
            Wait;
        Select:
            FIEX A 1 A_Raise;
            Loop;
        Fire:
            FIEX B 0 {
                A_Recoil(1.7);
                A_PlaySound("weapon/fireext/loop", CHAN_WEAPON, 1, 1);
            }
            FIEX B 1 {
                A_FireProjectile("FireExtPuff", Random(-3, 3), True);
                A_Recoil(0.7);
            }
            FIEX BB 1 A_FireProjectile("FireExtPuffNoDamage" , Random(-15, 15), False);
            FIEX B 0 ACS_NamedExecuteAlways("fireextfade", 0, 1);
        FireLoop:
            FIEX C 0 {
                A_PlaySound("weapon/fireext/loop", CHAN_WEAPON, 1, 1);
                A_SetAngle(FRandom(0.2, -0.2) + Angle);
                A_SetPitch(FRandom(0.2, -0.5) + Pitch);
                A_Recoil(0.01);
            }
            FIEX C 1 {
                A_FireProjectile("FireExtPuff", Random(-5, 5), True);
                A_SetBlend("CC CC CC", FRandom(0.795, 0.80), Random(10, 20));
                A_SetAngle(FRandom(0.2, -0.2) + Angle);
                A_SetPitch(FRandom(0.2, -0.5) + Pitch);
                A_Recoil(0.02);
            }
            FIEX CC 1 A_FireProjectile("FireExtPuffNoDamage" , Random(-10, 10), False);
            FIEX C 0 A_SetAngle(FRandom(0.2, -0.2) + Angle);
            FIEX C 0 A_SetPitch(FRandom(0.2, -0.5) + Pitch);
            FIEX C 1 {
                A_FireProjectile("FireExtPuff", Random(-5, 5), True);
                A_SetAngle(FRandom(0.2, -0.2) + Angle);
                A_SetPitch(FRandom(0.2, -0.5) + Pitch);
                A_Recoil(0.02);
            }
            FIEX CC 1 A_FireProjectile("FireExtPuffNoDamage", Random(-15, 15), False);
            FIEX B 1 {
                A_SetAngle(FRandom(0.2, -0.2) + Angle);
                A_SetPitch(FRandom(0.2, -0.5) + Pitch);
                A_ReFire("FireLoop");
                A_FireProjectile("FireExtPuff", Random(-5, 5), True);
            }
            FIEX B 1;
            FIEX BB 1 A_FireProjectile("FireExtPuffNoDamage", Random(-10, 10), False);
            FIEX B 0 {
                A_SetAngle(FRandom(1, -1) + Angle);
                A_SetPitch(FRandom(1, -1) + Pitch);
                A_ReFire();
                A_StopSound(CHAN_WEAPON);
                A_PlaySound("weapon/fireext/stop", CHAN_WEAPON);
                ACS_NamedExecuteAlways("fireextfade", 0, 0);
            }
            Goto Ready;
        Spawn:
            FEXT I -1;
            Stop;
    }
}

class FireExtPuff: Actor {
    Default {
        PROJECTILE;
        +FORCEXYBILLBOARD;
        +SPECTRAL;
        Height 5;
        Radius 5;
        Alpha 0.85;
        Speed 30;
        Scale 0.5;
        Gravity 10;
        DamageFunction 1;
        DamageType "DRRPFireExtDmg";
        RenderStyle "Add";
    }

    States {
        Spawn:
            STEM AAAAA 0 A_SpawnParticle("Gray", RandomPick(0, SPF_FULLBRIGHT), Random(3, 35), FRandom(0.75, 4), 0, 
                            Random(-5, 5), Random(-5, 5), Random(-5, 5), // Offsets
                            Random(-10, 10), Random(-10, 10), Random(-10, 10), // Speed
                            Random(-10, 10), Random(-10, 10), Random(-10, 10)); // Acceleration
            STEM A 1 A_SetTranslucent(0.7, 1);
            STEM B 1 A_SetScale(1.3, 1.3);
            STEM C 1 A_SetTranslucent(0.6, 1);
            STEM D 1 A_SetScale(1.5, 1.5);
            STEM E 1 A_SetTranslucent(0.5, 1);
            STEM F 1 A_SetScale(1.8, 1.8);
            STEM G 1 A_SetTranslucent(0.4, 1);
            STEM H 1 A_SetScale(2.0, 2.0);
            STEM I 1 A_SetTranslucent(0.3, 1);
            STEM J 1 A_SetTranslucent(0.2, 1);
            STEM K 1 A_SetTranslucent(0.1, 1);
            STEM L 1 A_SetTranslucent(0.05, 1);
        Death:
            STEM LLLLLLLLL 0 A_SpawnParticle("Gray", 0, Random(5, 70), FRandom(0.5, 2), 0, 
                            0, Random(-5, 0), Random(-5, 5), // Offsets
                            Random(-10, 10), Random(-10, 10), Random(-10, 10), // Speed
                            Random(-5, 5), Random(-5, 5), Random(-5, 5)); // Acceleration
            Stop;
    }
}

class FireExtPuffNoDamage: FireExtPuff {
    Default {
        Damage (0);
    }
}

class DRRPPistol: Pistol replaces Pistol {
    Default {
        DamageType "DRRPClipDmg";
        Decal "BulletChip";
        Weapon.SelectionOrder 70;
    }

    States {
        Fire:
            PISG A 4;
            //PISG B 0 A_FireBullets(5.6, 0, 1, DRRPPlayer( self ).getRPGAttackDamage( 5, 7), "BulletPuff", FBF_NORANDOM + FBF_USEAMMO);
            PISG B 0 A_FireBullets(5.6 * DRRPPlayer( self ).GetScatterMultiplier(), 3.2 * DRRPPlayer( self ).GetScatterMultiplier(), 
                        -1, DRRPPlayer( self ).getRPGAttackDamage( 3, 5), "BulletPuff", FBF_NORANDOM + FBF_USEAMMO);
            PISG B 0 A_PlaySound("weapons/pistol", CHAN_WEAPON);
            PISG B 1 {
                A_GunFlash();
                A_ZoomFactor(FRandom(0.995, 0.999), ZOOM_INSTANT);
                A_SetAngle(Angle + FRandom(-0.3, 0.3));
            }
            PISG B 2 Bright {
                A_SetPitch(Pitch - FRandom(-0.1, 0.4));
                A_ZoomFactor(1);
                A_SetPitch(Pitch - FRandom(-0.3, 0.3));
            }
            PISG B 1;
            PISG B 2 Bright A_SetPitch(Pitch + FRandom(0.2, 0.4));
            PISG C 4;
            PISG B 5 A_ReFire;
            Goto Ready;
    }
}

class DRRPShotgun: Shotgun replaces Shotgun {
    Default {
        DamageType "DRRPShotgunDmg";
        Decal "BulletChip";
        Weapon.AmmoType "DRRPShell";
        Weapon.SelectionOrder 40;
    }

    States {
        Fire:
            SHTG A 1;
            SHTG A 2 {
                A_FireBullets( 4.25 * ( DRRPPlayer( self ).GetScatterMultiplier() + 0.75 ), 
                    5.1 * ( DRRPPlayer( self ).GetScatterMultiplier() + 0.3 ), 
                    5, DRRPPlayer( self ).getRPGAttackDamage( 1, 2 ), "BulletPuff", FBF_NORANDOM + FBF_USEAMMO );
                A_FireBullets( 6.25 * ( DRRPPlayer( self ).GetScatterMultiplier() + 1.25 ), 
                    4.7 * ( DRRPPlayer( self ).GetScatterMultiplier() + 0.5 ), 
                    2, DRRPPlayer( self ).getRPGAttackDamage( 2, 3 ), "BulletPuff", FBF_NORANDOM );
                A_GunFlash();
                A_PlaySound( "weapons/shotgf", CHAN_WEAPON );
            }
            SHTG A 4;
            SHTG B 1;
            SHTG CD 2;
            SHTG E 1;
            SHTG FG 2;
            SHTG HI 3;
            SHTG JI 2;
            SHTG HGFE 1;
            SHTG DC 2;
            SHTG BAA 1;
            Goto Ready;
        Flash:
            TNT1 A 0 A_Light1;
            SHTF A 1 Bright {
                A_SetPitch(Pitch - FRandom(-0.1, 0.4));
                A_ZoomFactor(FRandom(0.985, 0.999));
                A_Recoil(0.5);
                A_SetAngle(Angle + FRandom(-1.5, 1.5));
            }
            SHTF A 1 Bright {
                A_SetPitch(Pitch - FRandom(-0.1, 0.5));
                A_SetAngle(Angle + FRandom(-1, 1));
            }
            SHTF A 1 Bright {
                A_SetPitch(Pitch - FRandom(0.2, 1));
                A_ZoomFactor(1);
                A_Light2();
            }
            SHTF B 3 Bright;
            Goto LightDone;
    }
}

class DRRPShell: Ammo replaces Shell {
    Default {
        Tag "$DRRP_I_SHELLCLIP";

        Inventory.PickupMessage "$GOTSHELLS"; // "Picked up 4 shotgun shells."
        Inventory.Amount 4;
        Inventory.MaxAmount 99;
        Ammo.BackpackAmount 4;
        Ammo.BackpackMaxAmount 99;
        Inventory.Icon "SHELA0";
    }
    States {
    Spawn:
        SHEL A -1;
        Stop;
    }
}

class DRRPShellBox: DRRPShell replaces ShellBox {
    Default {
        Inventory.PickupMessage "$GOTSHELLBOX";
        Inventory.Amount 16;
    }
}

class DRRPSuperShotgun : SuperShotgun replaces SuperShotgun {
    Default {
        DamageType "DRRPSSGDmg";
        Decal "BulletChip";
        Weapon.AmmoType "DRRPShell";
        Weapon.SelectionOrder 10;
    }

    States {
        Fire:
            SHT2 A 0 A_FireBullets( 6.8 * ( DRRPPlayer( self ).GetScatterMultiplier() + 2.7 ), 
                        5.9 * ( DRRPPlayer( self ).GetScatterMultiplier() + 1.7 ), 
                        10, DRRPPlayer( self ).getRPGAttackDamage( 1, 2 ), "BulletPuff", FBF_NORANDOM );
            SHT2 A 1 A_FireBullets( 7.5 * ( DRRPPlayer( self ).GetScatterMultiplier() + 1.6 ), 
                        7.25 * ( DRRPPlayer( self ).GetScatterMultiplier() + 1.2 ), 
                        4, DRRPPlayer( self ).getRPGAttackDamage( 2, 3 ), "BulletPuff", FBF_NORANDOM + FBF_USEAMMO );
            SHT2 A 0 A_PlaySound( "weapons/sshotf" );
            SHT2 A 2 A_GunFlash;
            SHT2 A 4;
            SHT2 A 3 A_CheckReload;
            SHTD BC 2;
            SHTD D 3;
            SHT2 A 0 A_PlaySound( "weapons/sshoto", CHAN_WEAPON );
            SHTD EF 3;
            SHTD G 6 A_GunFlash( "DoubleShellFallFlash" );
            SHTD H 2;
            SHTD IJ 3;
            SHTD K 3 A_LoadShotgun2;
            SHTD LMNO 3;
            SHTD P 2 A_PlaySound( "weapons/sshotc", CHAN_WEAPON );
            SHTD Q 3;
            SHTD RS 3;
            SHT2 A 2;
            Goto Ready;
        DoubleShellFallFlash:
            CAS1 ABCD 2;
            Stop;
        Flash:
            SHTF I 0 {
                A_SetAngle(Angle + FRandom(-1.0, 1.0));
                A_SetPitch(Pitch - FRandom(-0.9, 1.9));
            }
            SHT2 I 1 Bright {
                A_Light1();
                A_SetPitch(Pitch - FRandom(-0.3, 1.9));
                A_Recoil(1);
                A_SetAngle(Angle + FRandom(-1.6, 1.6));
            }
            SHT2 I 1 Bright A_SetPitch(Pitch - FRandom(-0.45, 1.5));
            SHTF A 0 A_ZoomFactor(FRandom(0.92, 0.95));
            SHT2 I 1 Bright A_SetPitch(Pitch - FRandom(-0.4, 0.8));
            SHTF A 0 A_SetAngle(Angle + FRandom(-0.4, 0.4));
            SHT2 I 1 Bright A_SetPitch(Pitch - FRandom(-0.3, 0.6));
            SHT2 I 0 Bright A_ZoomFactor(0.95);
            SHT2 J 1 Bright A_Light2;
            SHT2 I 0 Bright A_ZoomFactor(0.97);
            SHT2 J 1 Bright A_Light2;
            SHT2 I 0 Bright A_ZoomFactor(0.99);
            SHT2 J 1 Bright A_Light2;
            SHT2 I 0 Bright A_ZoomFactor(1);
            Goto LightDone;
    }
}

class DRRPChaingun: Chaingun replaces Chaingun {
    Default {
        DamageType "DRRPClipDmg";
        Decal "BulletChip";
        Weapon.SelectionOrder 30;
    }

    States {
        Fire:
            CHGG A 0 A_PlaySound("weapons/chngun", CHAN_WEAPON);
            CHGG A 0 A_GunFlash;
            CHGG A 2 A_FireBullets( 0.5 + 6.2 * DRRPPlayer( self ).GetScatterMultiplier(),
                        0.4 + 6.2 * DRRPPlayer( self ).GetScatterMultiplier(),
                        -1, DRRPPlayer( self ).getRPGAttackDamage( 3, 5 ), "BulletPuff", FBF_NORANDOM + FBF_USEAMMO);
            CHGG B 2;
            CHGG C 0 A_PlaySound("weapons/chngun", CHAN_WEAPON);
            CHGG C 0 A_GunFlash("Flash2");
            CHGG C 2 A_FireBullets( 0.5 + 6.2 * DRRPPlayer( self ).GetScatterMultiplier(), 
                        0.4 + 6.2 * DRRPPlayer( self ).GetScatterMultiplier(), 
                        -1, DRRPPlayer( self ).getRPGAttackDamage( 3, 6 ), "BulletPuff", FBF_NORANDOM + FBF_USEAMMO);
            CHGG D 2;
            CHGG C 0 A_ReFire;
            Goto Ready;
        Flash:
            CHGF A 0 Bright {
                A_ZoomFactor(FRandom(0.994, 1), ZOOM_INSTANT);
                A_SetPitch(Pitch - FRandom(-0.2, 0.7));
                A_SetAngle(Angle + FRandom(-0.4, 0.2));
            }
            CHGF A 1 Bright {
                A_Light1();
                A_Recoil(0.03);
                A_SetPitch(Pitch - FRandom(-0.2, 0.4));
                A_SetAngle(Angle + FRandom(-0.2, 0.1));
                A_ZoomFactor(1);
            }
            CHGF A 0 A_Jump( 95, 1 );
            Goto LightDone;
            CHGF A 1 Bright A_Light1;
            Goto LightDone;
        Flash2:
            CHGF B 0 Bright {
                A_ZoomFactor(FRandom(0.995, 0.999), ZOOM_INSTANT);
                A_SetPitch(Pitch - FRandom(-0.2, 0.7));
                A_SetAngle(Angle + FRandom(-0.4, 0.2));
            }
            CHGF B 1 Bright {
                A_Light1();
                A_ZoomFactor(1);
                A_Recoil(0.03);
                A_SetPitch(Pitch - FRandom(-0.2, 0.4));
                A_SetAngle(Angle + FRandom(-0.2, 0.1));
            }
            CHGF B 0 A_Jump( 95, 1 );
            Goto LightDone;
            CHGF B 1 Bright A_Light2;
            Goto LightDone;
    }
}

class DRRPRocketLauncher: RocketLauncher replaces RocketLauncher {
    Default {
        Weapon.SelectionOrder 60;
    }

    States {
        Fire:
            MISG B 10 A_GunFlash;
            MISG B 10;
            MISG B 0 A_ReFire;
            Goto Ready;
        Flash:
            TNT1 A 0 {
                A_AlertMonsters();
                A_FireProjectile( "DRRPRocket",
                    0.3 + Random( 0, DRRPPlayer( self ).GetScatterMultiplier() * 3.7 ) * RandomPick( -1, 1 ), true, 0, 0, 0,
                    0.3 + Random( 0, DRRPPlayer( self ).GetScatterMultiplier() * 2.5 ) * RandomPick( -1, 1 ) );
                A_Recoil(0.02 * Height);
                A_SetPitch(Pitch - 0.1 * Height);
                A_SetAngle(Angle + FRandom(-2.5, 2.5) * 0.02 * Height);
                A_Light2();
            }
            MISF AAAA 1 Bright A_SetPitch(Pitch + 0.005 * Height);
            TNT1 C 0 A_Light1;
            MISF BBBB 1 Bright A_SetPitch(Pitch + 0.005 * Height);
            TNT1 A 0 A_Light0;
            MISF CCCDDD 1 Bright A_SetPitch(Pitch + 0.005 * Height);
            TNT1 AAAAAAA 1 A_SetPitch(Pitch + 0.005 * Height);
            Goto LightDone;
            MISF A 3 Bright A_Light1;
            MISF B 4 Bright;
            MISF CD 4 Bright A_Light2;
            Goto LightDone;
    }
}

class DRRPRocket: Rocket replaces Rocket {
    Default {
        Decal "Scorch";
    }

	override void PostBeginPlay() {
		SetDamage( 20 + DRRPPlayer( target ).getRPGAttackDamage( 35, 0 ) );
	}

    States {
        Death:
            MISL B 8 Bright A_Explode(15 + DRRPPlayer( self ).getRPGAttackDamage( 50, 100 ), 96);
            MISL C 6 Bright;
            MISL D 4 Bright;
            Stop;
    }
}

class DRRPPlasmagun: PlasmaRifle replaces PlasmaRifle {
    Default {
        Weapon.SelectionOrder 20;
        +INVENTORY.ALWAYSPICKUP;
    }

    States {
        Fire:
            PLSG A 0 A_GunFlash;
            PLSG A 3 A_FireProjectile( "DRRPPlasmaBall",
                    0.3 + Random( 0, DRRPPlayer( self ).GetScatterMultiplier() * 4 ) * RandomPick( -1, 1 ), true, 0, 0, 0,
                    0.3 + Random( 0, DRRPPlayer( self ).GetScatterMultiplier() * 2.5 ) * RandomPick( -1, 1 ) );
            PLSG B 0 A_ReFire;
            PLSG B 0 A_ZoomFactor( 1 );
            PLSG A 2;
            PLSG B 1;
            PLSG DEF 2;
            PLSG G 4;
            PLSG H 9;
            PLSG G 2;
            PLSG FED 1;
            PLSG CBA 2;
            Goto Ready;
        Flash:
            PLSF A 0 {
                A_SetPitch(Pitch - FRandom(0.05, 0.4));
                A_SetAngle(Angle + FRandom(-0.2, 0.2));
                A_Recoil(0.075);
                A_ZoomFactor(FRandom(0.995, 0.999));
            }
            PLSF A 0 A_Jump(127, "Flash2");
            PLSF A 4 Bright A_Light1;
            Goto LightDone;
        Flash2:
            PLSF B 4 Bright A_Light1;
            Goto LightDone;
    }
}

class DRRPPlasmaBall: PlasmaBall replaces PlasmaBall {
    Default {
        Decal "PlasmaScorch";
    }

	override void PostBeginPlay() {
		SetDamage( DRRPPlayer( target ).getRPGAttackDamage( 3, 7 ) );
	}
}

class DRRPBFG9000: BFG9000 replaces BFG9000 {
    Default {
        Weapon.AmmoUse 30;
        Weapon.SelectionOrder 50;
    }

    States {
        Fire:
            BFGG A 20 A_BFGSound;
            BFGG B 10 A_GunFlash;
            BFGG B 10 A_FireProjectile( "DRRPBFG9000Ball", 
                    Random( 0, DRRPPlayer( self ).GetScatterMultiplier() * 6 ) * RandomPick( -1, 1 ), true, 0, 0, 0,
                    Random( 0, DRRPPlayer( self ).GetScatterMultiplier() * 4 ) * RandomPick( -1, 1 ) );
            BFGG B 20 A_ReFire;
            Goto Ready;
        Flash:
            BFGF A 3 Bright A_Light1;
            BFGF A 1 Bright A_Quake(1, 6, 0, 0);
            BFGF AAAA 2 Bright {
                A_SetAngle(Angle + FRandom(-0.5, 0.5));
                A_SetPitch(Pitch + FRandom(-0.35, 0.35));
                A_Recoil(FRandom(0.02, 0.35));
            }
            BFGF B 0 Bright {
                A_SetBlend("44FF44", 0.8, Random(40, 60));
                A_SetPitch(Pitch - FRandom(2.5, 5));
                A_Recoil(FRandom(0.5, 1.5));
                A_Light2();
                A_ZoomFactor(0.86, ZOOM_INSTANT);
            }
            BFGF BBB 1 Bright {
                A_SetAngle(Angle + FRandom(-1.5, 1.5));
                A_SetPitch(Pitch + FRandom(-1, 1));
                A_Recoil(FRandom(0.1, 0.75));
                A_ZoomFactor(0.885);
            }
            BFGF BBB 1 Bright {
                A_SetAngle(Angle + FRandom(-0.5, 0.5));
                A_SetPitch(Pitch + FRandom(-0.35, 0.35));
                A_ZoomFactor(0.91);
            }
            TNT1 A 1 Bright A_ZoomFactor(0.935);
            TNT1 A 1 Bright A_ZoomFactor(0.9475);
            TNT1 A 1 Bright A_ZoomFactor(0.955);
            TNT1 A 1 Bright A_ZoomFactor(0.9625);
            TNT1 A 1 Bright A_ZoomFactor(0.97);
            TNT1 A 1 Bright A_ZoomFactor(0.98);
            TNT1 A 1 Bright A_ZoomFactor(0.99);
            TNT1 A 0 Bright A_ZoomFactor(1);
            Goto LightDone;
    }
}

class DRRPBFG9000Ball: BFGBall replaces BFGBall {
    Default {
        Decal "BFGScorch";
    }

	override void PostBeginPlay() {
		SetDamage( DRRPPlayer( target ).getRPGAttackDamage( 35, 0 ) );
	}
}

class HellHoundHealth : Ammo {
    Default {
        Inventory.Amount 10;
        Inventory.MaxAmount 100;
        Inventory.Icon "DOGCA0";

        Ammo.BackpackAmount 0;
        Ammo.BackpackMaxAmount 0;
    }
}

class HellHoundGun: Weapon {
    Default {
        +WEAPON.WIMPY_WEAPON;
        //Tag "$DRRP_W_HELLHOUND";
        //Inventory.PickupSound "weapons/fireext/pick";
        //Inventory.PickupMessage "$DRRP_W_HELLHOUNDPICKUP";
        Weapon.AmmoUse 0;
        Weapon.AmmoGive 100;
        Weapon.AmmoType "HellHoundHealth";
        Weapon.SlotPriority 3;
        Weapon.SelectionOrder 7;
        DamageType "DRRPPhysicalDmg";
    }

    States {
        Ready:
            HDGG AAAAAAAA 1 A_WeaponReady;
            Loop;
        Select:
            HDGG A 1 Offset(0, 90);
            HDGG A 0 A_PlaySound("monsters/hellhound/see");
            HDGG A 1 Offset(0, 80);
            HDGG A 1 Offset(0, 70);
            HDGG A 1 Offset(0, 60);
            HDGG A 1 Offset(0, 55);
            HDGG A 1 Offset(0, 49);
            HDGG A 1 Offset(0, 44);
            HDGG A 1 Offset(0, 39);
            HDGG A 1 Offset(0, 35);
            HDGG A 1 Offset(0, 33);
            HDGG A 1 Offset(0, 32);
            Goto Ready;
        Deselect:
            HDGG A 1 A_Lower;
            Loop;
        Fire:
            TNT1 A 0 A_GunFlash("Flash", GFF_NOEXTCHANGE);
            HDGG A 0 A_PlaySound("monsters/hellhound/bark");
            HDGG CD 2;
            HDGG E 2 A_CustomPunch(DRRPPlayer( self ).getRPGAttackDamage( 6, 12 ), TRUE, 0, "DogGunPuff", 80, 0, 0, "ArmorBonus", "monsters/hellhound/bark");
            HDGG F 2 ;
            HDGG DCB 2;
            Goto Ready;
        Flash:
            TNT1 A 1 A_SetPitch(Pitch + Random(2, 4));
            TNT1 A 0 A_SetAngle(Angle + FRandom(-1, 1));
            TNT1 A 1 A_SetPitch(Pitch + Random(2, 5));
            TNT1 A 1 A_SetPitch(Pitch + Random(1, 4));
            TNT1 A 1 A_Recoil(Random(-7, -4));
            TNT1 A 0 A_SetAngle(Angle + FRandom(-1, 1));
            TNT1 A 1 A_SetPitch(Pitch - FRandom(5, 8));
            TNT1 A 0 A_SetAngle(Angle + FRandom(-2, 2));
            TNT1 A 1 A_SetPitch(Pitch - FRandom(3, 4));
            TNT1 A 0 A_SetAngle(Angle + FRandom(-2, 2));
            TNT1 A 1 A_SetPitch(Pitch - FRandom(3, 5));
            TNT1 A 0 A_SetAngle(Angle + FRandom(-3, 3));
            TNT1 A 1 A_SetPitch(Pitch - 4);
            TNT1 A 2;
            TNT1 A 1 A_SetPitch(Pitch + 3);
            Stop;
        Spawn:
            TNT1 A 0;
            Stop;
    }
}

class CerberusHealth : HellHoundHealth {}

class CerberusGun: HellHoundGun {
    Default {
        Tag "$DRRP_W_CERBERUS";
        Inventory.PickupMessage "$DRRP_W_CEREBRUSPICKUP";

        Weapon.AmmoType "CerberusHealth";
        Weapon.SlotPriority 2;
        Weapon.SelectionOrder 6;
    }

    States {
        Ready:
            CDGG AAAAAAAA 1 A_WeaponReady;
            Loop;
        Select:
            CDGG A 1 Offset(0, 90);
            CDGG A 0 A_PlaySound("monsters/cerberus/see");
            CDGG A 1 Offset(0, 80);
            CDGG A 1 Offset(0, 70);
            CDGG A 1 Offset(0, 60);
            CDGG A 1 Offset(0, 55);
            CDGG A 1 Offset(0, 49);
            CDGG A 1 Offset(0, 44);
            CDGG A 1 Offset(0, 39);
            CDGG A 1 Offset(0, 35);
            CDGG A 1 Offset(0, 33);
            CDGG A 1 Offset(0, 32);
            GoTo Ready;
        Deselect:
            CDGG A 1 A_Lower;
            Loop;
        Fire:
            TNT1 A 0 A_GunFlash("Flash", GFF_NOEXTCHANGE);
            CDGG A 0 A_PlaySound("monsters/cerberus/bark");
            CDGG CD 2;
            CDGG E 2 A_CustomPunch(DRRPPlayer( self ).getRPGAttackDamage( 7, 20 ), TRUE, 0, "DogGunPuff", 80, 0, 0, "ArmorBonus", "monsters/cerberus/bark");
            CDGG F 2 ;
            CDGG DCB 2;
            Goto Ready;
         Spawn:
            TNT1 A 1;
            Stop;
    }
}

class DemonWolfHealth : HellHoundHealth {}

class DemonWolfGun: HellHoundGun {
    Default {
        Tag "$DRRP_W_DEMONWOLF";
        Inventory.PickupMessage "$DRRP_W_DEMONWOLFPICKUP";

        Weapon.AmmoType "DemonWolfHealth";
        Weapon.SlotPriority 1;
        Weapon.SelectionOrder 5;
    }

    States {
        Ready:
            DDGG AAAAAAAA 1 A_WeaponReady;
            Loop;
        Select:
            DDGG A 1 Offset(0, 90);
            DDGG A 0 A_PlaySound("monsters/demonwolf/see");
            DDGG A 1 Offset(0, 80);
            DDGG A 1 Offset(0, 70);
            DDGG A 1 Offset(0, 60);
            DDGG A 1 Offset(0, 55);
            DDGG A 1 Offset(0, 49);
            DDGG A 1 Offset(0, 44);
            DDGG A 1 Offset(0, 39);
            DDGG A 1 Offset(0, 35);
            DDGG A 1 Offset(0, 33);
            DDGG A 1 Offset(0, 32);
            GoTo Ready;
        Deselect:
            DDGG A 1 A_Lower;
            Loop;
        Fire:
            TNT1 A 0 A_GunFlash("Flash", GFF_NOEXTCHANGE);
            DDGG A 0 A_PlaySound("monsters/demonwolf/bark");
            DDGG CD 2;
            DDGG E 2 A_CustomPunch(DRRPPlayer( self ).getRPGAttackDamage( 10, 35 ), TRUE, 0, "DogGunPuff", 80, 0, 0, "ArmorBonus", "monsters/demonwolf/bark");
            DDGG F 2 ;
            DDGG DCB 2;
            Goto Ready;
        Spawn:
            TNT1 A 1;
            Stop;
    }
}

class DogGunPuff: Actor {
    Default {
        +NOBLOCKMAP;
        +NOGRAVITY;
        +ALLOWPARTICLES;
        +RANDOMIZE;
        Alpha 0.5;
        VSpeed 1;
        Mass 5;
        AttackSound "weapons/melee/hitwall";
        SeeSound "weapons/melee/hit";
        Obituary "$OB_METADOG_BITE";
        DamageType "DRRPPhysicalDmg";
        RenderStyle "Translucent";
    }

    States {
        Spawn:
            PUFF A 4 Bright;
            PUFF B 4;
        Melee:
            PUFF CD 4;
            Stop;
    }
}
