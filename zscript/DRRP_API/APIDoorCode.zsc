/**
 *Copyright (c) 2018-2019 DRRP-Team
 *
 *This software is released under the MIT License.
 *https://opensource.org/licenses/MIT
 */

class DoorCodeInputActor {
    static int DoorCode(Actor activator, string info, string code, int scriptnum) {
        EventHandler.SendNetworkEvent("opendoorinput@@@@" .. info .. "@@@@" .. code, 666, scriptnum);
 
        return 1;
    }
}

class DoorCodeInputStubItem : Inventory {
    String code;
    String displayTooltip;
    int scriptnum;
}

class DoorCodeInputHandler : EventHandler {
    String codeStr;
    String realCodeStr;
    String displayTooltip;

    override void OnRegister() {
        SetOrder(666);
    }

    override void NetworkProcess(ConsoleEvent e) {
        Array<string> command;
        e.Name.Split(command, "@@@@");
        if(command[0] == "opendoorinput") { // ["opendoorinput", message, code]
            if(command.size() == 3) {
                players[e.player].mo.A_GiveInventory("DoorCodeInputStubItem");
                ACS_Suspend(-int(name("lockwindow")), 0);
                DoorCodeInputStubItem item = DoorCodeInputStubItem(players[e.player].mo.findInventory("DoorCodeInputStubItem"));
                item.code = command[2];
                item.displayTooltip = command[1];
                item.scriptnum = e.args[1];
                Menu.SetMenu("DoorCodeInputMenu");
            }
        } else if (command[0] == "closedoorinput") {
            DoorCodeInputStubItem item = DoorCodeInputStubItem(players[e.player].mo.findInventory("DoorCodeInputStubItem"));
            if(item == null) return;

            if (e.Args[0] == 1) {
                players[e.Player].mo.A_PlaySound("access/grant1" .. StringTable.Localize("$DRRP_D_SOUND_SUFFIX"));;
                ACS_Execute(-int(name("lockwindow")), 0, 0, 0, 0);
            } else if (e.Args[0] == 2) {
                players[e.Player].mo.A_PlaySound("access/deny1" .. StringTable.Localize("$DRRP_D_SOUND_SUFFIX"));;
                players[e.Player].mo.A_Print(StringTable.Localize("$DRRP_D_PASSCODE_WRONG"));
                ACS_Terminate(-int(name("lockwindow")), 0);
                ACS_Terminate(item.scriptnum, 0);
            } else if (e.Args[0] == 3) {
                ACS_Terminate(-int(name("lockwindow")), 0);
                ACS_Terminate(item.scriptnum, 0);
            }
        }
    }

    void initDoorCodeWindow() {
        DoorCodeInputStubItem item = DoorCodeInputStubItem(players[consoleplayer].mo.findInventory("DoorCodeInputStubItem"));

        if(item == null) {
            codeStr = "____";
            realCodeStr = "0000";
            displayTooltip = "you shouldn't see this\n";
        } else {
            realCodeStr = item.code;
            codeStr = "";
            displayTooltip = item.displayTooltip;

            for(int i = 0; i < self.realCodeStr.Length(); i++) {
                codeStr.AppendFormat("_");
            }
        }
    }
}

class DoorCodeInputMenu : GenericMenu {
    String codeStr;
    String realCodeStr;
    String displayTooltip;

    Override
    void init(Menu parent) {
        DoorCodeInputStubItem item = DoorCodeInputStubItem(players[consoleplayer].mo.findInventory("DoorCodeInputStubItem"));

        if(item == null) {
            codeStr = "____";
            realCodeStr = "0000";
            displayTooltip = "you shouldn't see this\n";
        } else {
            realCodeStr = item.code;
            codeStr = "";
            displayTooltip = item.displayTooltip;

            for(int i = 0; i < self.realCodeStr.Length(); i++) {
                codeStr.AppendFormat("_");
            }
        }
    }
    
    override void Drawer() {
        ACS_NamedExecute("drawwindow", 0, displayTooltip .. " " .. self.codeStr, 0, 0);

        // then

        ACS_NamedExecute("clearwindow", 0);

        // Super.Drawer();

        // let tex = TexMan.CheckForTexture("M_DLGNSC", TexMan.Type_MiscPatch);
        // if (tex.IsValid()) {
        //     Vector2 v = TexMan.GetScaledSize(tex);
        //     int x = 320;
        //     int y = 318;
        //     screen.DrawTexture(tex, false, x, y, DTA_LeftOffset, int(v.x / 2), DTA_VirtualWidth, 640, DTA_VirtualHeight, 480);
        //     Font font = Font.FindFont("smallfont");
        //     screen.DrawText(font, Font.CR_WHITE, 244, 322, displayTooltip .. " " .. self.codeStr, DTA_VirtualWidth, 640, DTA_VirtualHeight, 480);
        // }
    }


    // Here we handle only keys from '0' to '9' (ASCII 48...57):
    override bool OnUIEvent( UIEvent e ) {
        Super.OnUIEvent( e );

        if ( e.Type == UiEvent.Type_KeyDown ) {

            // Handle numbers from 0 to 9:
            if ( e.keyChar >= 48 && e.keyChar <= 57 ) {

                for ( int i = 0; i < codeStr.Length(); i++ ) {
                    if ( codeStr.CharAt( i ) != '_' )
                        continue;

                    codeStr = String.format( "%s%c", codeStr.Left( i ), e.keyChar );

                    for( int j = codeStr.Length(); j < self.realCodeStr.Length(); j++ )
                        codeStr.AppendFormat( "_" );

                    break;
                }

                // Length of input is less than password length:
                for ( int i = 0; i < codeStr.Length(); i++ )
                    if ( codeStr.CharAt( i ) == '_' )
                        return true;

                // Limit by length:
                EventHandler.SendNetworkEvent( "closedoorinput", codeStr == realCodeStr ? 1 : 2 );
                Close();

            }

        } // of if ( e.Type == UiEvent.Type_KeyDown ) {

        return true;
    }

    // Here we handle backspace and escape:
    override bool MenuEvent( int mkey, bool fromcontroller ) {
        switch ( mkey ) {
            case Menu.MKEY_Clear: // Backspace.
                int inputEndIndex = codeStr.IndexOf( "_" );

                if ( inputEndIndex > 0 ) {
                    String codeStrEndPart = "";

                    for ( int i = 0; i < codeStr.Length() - inputEndIndex + 1; i++ )
                        codeStrEndPart = codeStrEndPart .. "_";

                    codeStr.Truncate( inputEndIndex - 1 );
                    codeStr = codeStr .. codeStrEndPart;
                }

                break;

            case Menu.MKEY_Back: // Escape.
                EventHandler.SendNetworkEvent( "closedoorinput", 3 );
                break;

            default:
                break;
        }

        return Super.MenuEvent( mkey, fromcontroller );
    }
}
