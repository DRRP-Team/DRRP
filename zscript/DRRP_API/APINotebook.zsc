/**
 * Copyright (c) 2017-2022 DRRP-Team
 * 
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */

class NotebookItem: Inventory {
    DRRPIntToStringBruteforceMultiMap languageStrings;
}

class NotebookTooltipItem: Inventory {}

class NotebookHandler: EventHandler {
    ui int timer;
    ui bool isNotebookMessageShown;

    /* Writes a notebook tooltip message. */
    override void RenderOverlay( RenderEvent e ) {
        if ( players[consoleplayer].mo.CountInv("NotebookTooltipItem") >= 1) {
            Font font = Font.FindFont("smallfont");
            int key1, key2;
            [key1, key2] = Bindings.GetKeysForCommand("opennotebook");

            if(key1 == 0 && key2 == 0) return;

            String s = KeyBindings.NameKeys(key1, key2);
            s.ToUpper();
            String ss = StringTable.Localize("$DRRP_D_NOTEBOOK_TIP_PART1") 
                    .. s .. StringTable.Localize("$DRRP_D_NOTEBOOK_TIP_PART2");

            self.timer++;

            if (self.timer >= 10) {
                self.timer = 0;
                self.isNotebookMessageShown = !self.isNotebookMessageShown;
            }

            if (self.isNotebookMessageShown)
                Screen.drawText(font, Font.CR_GOLD, Screen.GetWidth() - font.StringWidth(ss), 0, ss);
        }

        Super.RenderOverlay( e );
    } // of override void RenderOverlay( RenderEvent e ) {

    
    /* Handle netevent "remove notebook tooltip". */
    override void NetworkProcess( ConsoleEvent e ) {
        if ( e.name ~== "killnotebook" )
            players[ e.player ].mo.A_TakeInventory( "NotebookTooltipItem", 0 );

        Super.NetworkProcess( e );
    } // of override void NetworkProcess( ConsoleEvent e ) {

}

class NotebookMenu : OptionMenu {

    /* Init and use the notebook menu. */
    override void Init( Menu parent, OptionMenuDescriptor menu ) {
        Super.Init( parent, menu );

        PlayerInfo player = players[ consoleplayer ];

        EventHandler.SendNetworkEvent( "killnotebook" );
        menu.mItems.clear();

        // If we aren't in game.
        if ( !player || !player.mo ) {
            OptionMenuItemStaticText item = new("OptionMenuItemStaticText");

            item.Init(StringTable.Localize("$DRRP_D_NOTEBOOK_NOTINGAME"));
            menu.mItems.push(item);

            return;
        }


        NotebookItem nbitem = NotebookItem( player.mo.FindInventory("NotebookItem") );
        DRRPIntToStringBruteforceMultiMapArrayWrapper strings = null;

        if ( nbitem != NULL )
            strings = nbitem.languageStrings.get( level.levelnum );

        // If there's no records in the notebook.
        if ( !nbitem || strings.TheStringArray.size() == 0 ) {
            OptionMenuItemStaticText item = new( "OptionMenuItemStaticText" );

            item.Init( StringTable.Localize( "$DRRP_D_NOTEBOOK_EMPTY" ) );
            menu.mItems.push( item );
            return;
        }

        // Print records to the notebook menu.
        for ( int i = strings.TheStringArray.size() - 1; i >= 0; i-- ) {
            String text = StringTable.localize( "$" .. strings.TheStringArray[ i ] );

            Array<String> lines;
            lines.clear();
            text.split( lines, "\n" );

            for ( int j = 0; j < lines.size(); j++ ) {
                String curline = lines[ j ];

                OptionMenuItemStaticText lineitem = new( "OptionMenuItemStaticText" );

                lineitem.Init( curline );
                menu.mItems.push( lineitem );
            }

            // Print a blank line (separator).
            OptionMenuItemStaticText itemseparator = new( "OptionMenuItemStaticText" );
            itemseparator.Init( "" );

            menu.mItems.push( itemseparator );
        } // of for ( int i = strings.TheStringArray.size() - 1; i >= 0; i-- ) {

    } // of override void Init( Menu parent, OptionMenuDescriptor menu ) {

}

class NotebookAPI {
    play static void AddNotebookEntry(Actor activator, String entry) {
        if(activator.CountInv("NotebookItem") <= 0) {
            activator.A_GiveInventory("NotebookItem");
            NotebookItem nbitem = NotebookItem(activator.FindInventory("NotebookItem"));
            nbitem.languageStrings = new("DRRPIntToStringBruteforceMultiMap");
        }
        
        NotebookItem nbitem = NotebookItem(activator.FindInventory("NotebookItem"));

        nbitem.languageStrings.put(level.levelnum, entry);
        activator.A_GiveInventory("NotebookTooltipItem");
    }
}
