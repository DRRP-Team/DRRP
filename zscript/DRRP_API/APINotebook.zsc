/**
 * Copyright (c) 2017-2019 DRRP-Team
 * 
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */

class NotebookItem : Inventory {
    DRRPIntToStringBruteforceMultiMap languageStrings;
}

class NotebookTooltipItem : Inventory {}

class NotebookHandler : EventHandler {
    Override
    void RenderOverlay(RenderEvent e) {
        if(players[consoleplayer].mo.CountInv("NotebookTooltipItem") >= 1) {
            Font font = Font.FindFont("smallfont");
            int key1, key2;
            [key1, key2] = Bindings.GetKeysForCommand("opennotebook");

            if(key1 == 0 && key2 == 0) return;

            String s = KeyBindings.NameKeys(key1, key2);
            s.ToUpper();
            String ss = StringTable.Localize("$DRRP_D_NOTEBOOK_TIP_PART1") 
                    .. s .. StringTable.Localize("$DRRP_D_NOTEBOOK_TIP_PART2");

            Screen.drawText(font, Font.CR_GOLD, Screen.GetWidth() - font.StringWidth(ss), 0, ss);
        }
    }
    
    Override
    void NetworkProcess(ConsoleEvent e) {
        if(e.name == "killnotebook") {
            players[e.player].mo.A_TakeInventory("NotebookTooltipItem", 0);
        }
    }
}

class NotebookMenu : OptionMenu {
    Override
    void Init(Menu parent, OptionMenuDescriptor menu) {
        super.Init(parent, menu);
        EventHandler.SendNetworkEvent("killnotebook");

        playerinfo player = players[consoleplayer];

        menu.mItems.clear();

        if(player == null || player.mo == null) {
            OptionMenuItemStaticText item = new("OptionMenuItemStaticText");

            item.Init(StringTable.Localize("$DRRP_D_NOTEBOOK_NOTINGAME"));
            menu.mItems.push(item);

            return;
        }

        NotebookItem nbitem = NotebookItem(player.mo.FindInventory("NotebookItem"));
    
        
        DRRPIntToStringBruteforceMultiMapArrayWrapper strings = null;
        if(nbitem != null) {
            strings = nbitem.languageStrings.get(level.levelnum);
        }
        

        if(nbitem == null || strings.TheStringArray.size() == 0) {
            OptionMenuItemStaticText item = new("OptionMenuItemStaticText");

            item.Init(StringTable.Localize("$DRRP_D_NOTEBOOK_EMPTY"));
            menu.mItems.push(item);
            return;
        }

        OptionMenuItemStaticText separator = new("OptionMenuItemStaticText");
        separator.Init("");

        for(int i = strings.TheStringArray.size() - 1; i >= 0; i--) {
            String text = StringTable.localize( "$" .. strings.TheStringArray[i]);

            Array<String> lines;
            text.split(lines, "\n");

            for(int j = 0; j < lines.size(); j++) {
                String line = lines[j];

                OptionMenuItemStaticText lineitem = new( "OptionMenuItemStaticText" );

                lineitem.Init( line );
                menu.mItems.push( lineitem );
            }

            menu.mItems.push( separator );
        }
    }
}

class NotebookAPI {
    play static void AddNotebookEntry(Actor activator, String entry) {
        if(activator.CountInv("NotebookItem") <= 0) {
            activator.A_GiveInventory("NotebookItem");
            NotebookItem nbitem = NotebookItem(activator.FindInventory("NotebookItem"));
            nbitem.languageStrings = new("DRRPIntToStringBruteforceMultiMap");
        }
        
        NotebookItem nbitem = NotebookItem(activator.FindInventory("NotebookItem"));

        nbitem.languageStrings.put(level.levelnum, entry);
        activator.A_GiveInventory("NotebookTooltipItem");
    }
}
