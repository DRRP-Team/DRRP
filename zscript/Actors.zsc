/**
 * Copyright (c) 2017-2021 DRRP-Team
 * 
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */


// Items -------------------------------------------------------------------------

class DRRPArmorShard: Inventory replaces ArmorBonus {
    int armorAmountGive;
    Default {
        Radius 20;
        Height 16;
        Tag "$DRRP_I_ARMORSHARD";
        Inventory.PickupMessage "$DRRP_I_GOT_ARMORSHARD";
        +COUNTITEM;
        +INVENTORY.ALWAYSPICKUP;
    }

    override void BeginPlay() {
        armorAmountGive = 1;
    }

    override void Touch( Actor toucher ) {
        if ( !toucher || !( toucher is "DRRPPlayer" ) ) 
            return;

        Inventory armor = DRRPPlayer( toucher ).FindInventory( "DRRPBasicArmor" );
        if ( armor ) 
            if ( DRRPPlayer( toucher ).GetFeature( RPG_MaxArmor ) <= armor.Amount )
                return;

        toucher.A_GiveInventory( "DRRPBasicArmor", armorAmountGive );
        Super.Touch( toucher );
    }

    States {
        Spawn:
            BON2 ABCDCB 6;
            Loop;
    }
}

class DRRPFlakJacket: DRRPArmorShard replaces GreenArmor {
    Default {
        Tag "$DRRP_I_FLAKJACKET";
        Inventory.PickupMessage "$DRRP_I_GOT_FLAKJACKET";
    }

    override void BeginPlay() {
        armorAmountGive = 25;
    }

    States {
        Spawn:
            ARM1 A 6;
            ARM1 B 7 Bright;
            Loop;
    }
}

class DRRPCombatSuit: DRRPArmorShard replaces BlueArmor {
    Default {
        Tag "$DRRP_I_COMBATSUIT";
        Inventory.PickupMessage "$DRRP_I_GOT_COMBATSUIT";
    }

    override void BeginPlay() {
        armorAmountGive = 50;
    }

    States {
        Spawn:
            ARM2 A 6;
            ARM2 B 6 Bright;
            Loop;
    }
}

// Other -------------------------------------------------------------------------

class DRRPActorsHandler: EventHandler {
    const gibDamage = -30;

    override void OnRegister() {
        SetOrder( 2174 );
    }

    override void WorldThingDamaged( WorldEvent e ) {
        if ( e.Thing && e.Thing.bISMONSTER && e.Thing.health < gibDamage ) {
            Actor gibSpawner = e.Thing.Spawn( "DRRPExtraDamageGibSpawner", e.Thing.pos );
            gibSpawner.master = e.Thing;
        }

        Super.WorldThingDamaged( e );
    } // of override void WorldThingDamaged( WorldEvent e ) {
}

class DRRPExtraDamageGibSpawner: Actor {
    int spawnTime;

    Default {
        Radius 0;
        Height 0;
        -SOLID;
        -SHOOTABLE;
    }

    override void PostBeginPlay() {
        if ( !master )
            Destroy();
        else
            spawnTime = Random( 2, 8 );
    }

    override void Tick() {
        for ( int i = 0; i < Random( 0, 5 ); i++ ) {
            master.A_SpawnItemEx( "DRRPExtraDamageGib", 
                    FRandom( -4.0, 4.0 ), FRandom( -4.0, 4.0 ), FRandom( 5.0, 10.0 ),
                    FRandom( -6.0, 6.0 ), FRandom( -6.0, 6.0 ), FRandom( 5.0, 10.0 ) );
        }

        if ( !( --spawnTime ) )
            Destroy();
    }
}

class DRRPExtraDamageGib: Actor {
    int rollingDelay, curRollingDelay;

    Default {
        Radius 4;
        Height 4;
        -SOLID;
        -SHOOTABLE;
        +BOUNCEONWALLS;
        +BOUNCEONFLOORS;
        +BOUNCEONCEILINGS;
    }

    States {
    Spawn:
        TNT1 A 0;
        TNT1 A 0 {
        }
        GIB5 A 0 A_Jump( 255, "Gibs1", "Gibs2", "Gibs3", "Gibs4", "Gibs5", "Gibs6", "Gibs7", "Gibs8" );
    Gibs1: GIB1 "#" 1; goto Death;
    Gibs2: GIB2 "#" 1; goto Death;
    Gibs3: GIB3 "#" 1; goto Death;
    Gibs4: GIB4 "#" 1; goto Death;
    Gibs5: GIB5 "#" 1; goto Death;
    Gibs6: GIB6 "#" 1; goto Death;
    Gibs7: GIB7 "#" 1; goto Death;
    Gibs8: GIB8 "#" 1; goto Death;
    Death:
        "####" "#" 0 {
            curRollingDelay = rollingDelay = Random( 0, 10 );
            scale *= FRandom( 0.1, 0.5 );
            frame = Random( 0, 3 );
        }
        "####" "############################" 2 {
            if ( !( --curRollingDelay ) ) {
                frame = ( frame + 1 ) % 4;
                curRollingDelay = rollingDelay;

                if ( !Random( 0, 1 ) )
                    rollingDelay++;
            }
        }
        "####" "#" 300;
        "####" "##########################" 5 A_FadeOut( 0.02 );
        Wait;
    }
}


class DRRPTeleportFog: TeleportFog replaces TeleportFog {
    int counter;

    override void PostBeginPlay() {
        counter = 30;
        S_Sound( "misc/teleport", CHAN_AUTO );
    }

    void A_DRRP_TeleportationParticles( void ) {
        DRRPActorAdditionalFunctions.SummonDRRPParticle( self, "DRRPTeleportationParticle", 24, 64 );
    }

    States {
        Spawn:
            TNT1 AAAAA 0 A_DRRP_TeleportationParticles();
            TNT1 A 1 A_JumpIf( !counter--, "Null" );
            Loop;
    }

}

class DRRPKronosTeleportFog: TeleportFog {
}

class DRRPDamageDoll: DRRPPlayer {
    Default {
        +BUDDHA;
        +DONTTHRUST;
        +NOBLOODDECALS;
        +QUICKTORETALIATE;
        -FRIENDLY;
        //-NOINFIGHTING;
        Health 0x4000;
        Tag "\cGD\cXo\cQl\cHl\c-, \cLnot more\c-.";
    }

    override void Tick() {
        Super.Tick();
        if ( 0x4000 - health )
            console.printf( "(Doll): taked " 
                            .. TEXTCOLOR_YELLOW .. 0x4000 - health .. TEXTCOLOR_NORMAL 
                            .. " HP by " .. ( ( target == NULL )
                                ? "environment"
                                : ( ( target.Player != NULL )
                                    ? "player " .. target.Player.GetUserName()
                                    : target.GetTag() .. " (class " .. target.GetClassName() .. ")"
                                ) 
                            ) .. "." );
        health = 0x4000;
    }
}
