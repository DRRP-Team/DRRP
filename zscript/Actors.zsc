/**
 * Copyright (c) 2017-2019 DRRP-Team
 * 
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */


// Damages -----------------------------------------------------------------------

class DRRPLava: Actor { // Has Decorate heir (DRRPLava_Decorate).

    int fireActorDamageMin, fireActorDamageMax, fireActorDamageTicks;

    void damageNearestPlayers( void ) {
        for ( int i = 0; i < MAXPLAYERS; i++ ) {
            if ( !( level.maptime % fireActorDamageTicks ) && PlayerInGame[ i ] && Distance3D( players[ i ].mo ) < 32 )
                Players[ i ].mo.DamageMobj( self, self, random( fireActorDamageMin, fireActorDamageMax ), "DRRPFireDmg" );
        } // of for ( uint8 i = 0; i < MAXPLAYERS; i++ )
    } // of void damagePlayers( void )

    override void BeginPlay() {
        fireActorDamageMin = 3;
        fireActorDamageMax = 7;
        fireActorDamageTicks = 2;
    } // of override void BeginPlay()

    override void Tick() {
        damageNearestPlayers();
        Super.Tick();
    } // of override void Tick()

    override bool CanCollideWith( Actor other, bool passive ) {

        String cn = other.getClassName();
        if ( cn ~== "DoomRPGPlayer"
                || cn ~== "Phantom"
                || cn ~== "DRRPLostSoul"
                || cn ~== "Nightmare"

                || cn ~== "Beholder"
                || cn ~== "Rahovart"
                || cn ~== "DRRPPainElemental"

                || cn ~== "Infernis"
                || cn ~== "DRRPArchVile"
                || cn ~== "Apollyon"

                || cn ~== "BulletPuff"

                || ( ( other.bMISSILE == true ) && ( cn != "FireExtPuff") ) ) {
            return false;
        }

        return true;
    } // of override bool CanCollideWith( Actor other, bool passive )

    Default {
        MONSTER;
        +NOBLOOD;
        +NOTARGET;
        +NOTRIGGER;
        +DONTTHRUST;
        +NOTAUTOAIMED;
        -ISMONSTER;
        -COUNTKILL;
        -SHOOTABLE;
        -PUSHABLE;
        Tag "$DRRP_E_LAVAPOOL";
        Health 10;
        Mass 0x7FFFFFFF;
        // Last (fifth) argument is invisiblity of the lava pool.
    }

    States {
        Spawn:
            TNT1 A 0;
            TNT1 A 1 A_JumpIf( Args[ 4 ] == 0, "SpawnLoopVisible" );
            TNT1 A 1 A_PlaySound( "ICOSCRE", CHAN_7, 0.9, true, 2.5 );
            Wait;
        SpawnLoopVisible:
            LAVA A 1 Bright A_PlaySound( "ICOSCRE", CHAN_7, 0.9, true, 2.5 );
            Loop;
    }
}

class DRRPFire: DRRPLava { // Has Decorate heir (DRRPFire_Decorate).

    Default {
        MONSTER;
        +SOLID;
        +SPECTRAL;
        -COUNTKILL;
        Tag "$DRRP_E_FIRE";
        Obituary "$DRRP_OB_FIRE";
        Health 6;
        Radius 33;
        Mass 0x7FFFFFFF;
        DamageType "DRRPFireDmg";
        DamageFactor "DRRPFireExtDmg", 1.0;
        DamageFactor "Normal", 0;
    }

    override void BeginPlay() {
        fireActorDamageMin = 1;
        fireActorDamageMax = 4;
        fireActorDamageTicks = 3;
    } // of override void BeginPlay()

    override void Tick() {
        damageNearestPlayers();

        //float ScaleTo = -0.5 * exp( 1 - ( float( health / SpawnHealth() ) ) ) + 1.5;
        //float ScaleTo = 1 / ( 0.66 + ( 1 - float( health ) / float( SpawnHealth() ) ) ) - 0.5;
        fireActorDamageMax = ( health / 2  ) + 1;

        double ScaleTo = double( health ) / double( SpawnHealth() );
        double ScaleNow = ( ScaleTo < Scale.x )? Scale.x - ( ( Scale.x - ScaleTo ) / 15 ): ScaleTo;
        self.Scale = ( ScaleNow, ScaleNow );

        Super.Tick();
    } // of override void Tick()

    States {
        Spawn:
            FIRE A 0 Bright;
            FIRE A 0 Bright A_JumpIf(Args[0] != 0, "Spawn.Start");
            FIRE A 0 Bright A_SetArg(0, 255);
        Spawn.Start:
            FIRE A 0 Bright;
            FIRE A 0 Bright A_PlaySound("fire/loop3", CHAN_7, (Args[0] * 1.0) / 255, true, 2.5);
            FIRE A 0 Bright A_Jump(256, Random(1, 8));
        Spawn.Loop:
            FIRE ABCDEFGH 2 BRIGHT;
            Loop;
        Death:
            TNT1 A 0;
            Stop;
    }

}

class DRRPExplosion: Actor { // Has Decorate heir (DRRPExplosion_Decorate).
    Default {
        +NOGRAVITY;
        +DONTFALL;
        +FLOORCLIP;
        Tag "$DRRP_D_EXPLOSION";
    }

    override void PostBeginPlay() {
        if ( pos.z <= ( FloorZ + self.height ) ) SetZ( FloorZ + ( self.height * 1.5 ) );
    }

    States {
        Spawn:
            MISL B 0 Bright A_Quake( 7, 7, 0, 256 );
            MISL B 1 Bright A_PlaySound("generic/expl/explode", CHAN_AUTO);
            MISL B 5 Bright A_Explode();
            MISL C 5 Bright;
            MISL D 4 Bright;
            Stop;
    }
}

// Items -------------------------------------------------------------------------

class DRRPArmorShard: Inventory replaces ArmorBonus {
    int armorAmountGive;
    Default {
        Radius 20;
        Height 16;
        Tag "$DRRP_I_ARMORSHARD";
        Inventory.PickupMessage "$DRRP_I_GOT_ARMORSHARD";
        +COUNTITEM;
        +INVENTORY.ALWAYSPICKUP;
    }

    override void BeginPlay() {
        armorAmountGive = 1;
    }

    override void Touch( Actor toucher ) {
        if ( !toucher || !( toucher is "DRRPPlayer" ) ) 
            return;
        Inventory armor = DRRPPlayer( toucher ).FindInventory( "DRRPBasicArmor" );
        if ( armor ) 
            if ( DRRPPlayer( toucher ).GetFeature( toucher, RPG_MaxArmor ) <= armor.Amount )
                return;

        toucher.A_GiveInventory( "DRRPBasicArmor", armorAmountGive );
        Super.Touch( toucher );
    }

    States {
        Spawn:
            BON2 ABCDCB 6;
            Loop;
    }
}

class DRRPFlakJacket: DRRPArmorShard replaces GreenArmor {
    Default {
        Tag "$DRRP_I_FLAKJACKET";
        Inventory.PickupMessage "$DRRP_I_GOT_FLAKJACKET";
    }

    override void BeginPlay() {
        armorAmountGive = 25;
    }

    States {
        Spawn:
            ARM1 A 6;
            ARM1 B 7 Bright;
            Loop;
    }
}

class DRRPCombatSuit: DRRPArmorShard replaces BlueArmor {
    Default {
        Tag "$DRRP_I_COMBATSUIT";
        Inventory.PickupMessage "$DRRP_I_GOT_COMBATSUIT";
    }

    override void BeginPlay() {
        armorAmountGive = 50;
    }

    States {
        Spawn:
            ARM2 A 6;
            ARM2 B 6 Bright;
            Loop;
    }
}

// Other -------------------------------------------------------------------------

class DRRPTeleportFog: TeleportFog replaces TeleportFog {
    int counter;

    override void PostBeginPlay() {
        counter = 30;
        S_Sound( "misc/teleport", CHAN_AUTO );
    }

    void A_DRRP_TeleportationParticles( void ) {
        DRRPActorAdditionalFunctions.SummonDRRPParticle( self, "DRRPTeleportationParticle", 24, 64 );
    }

    States {
        Spawn:
            TNT1 AAAAA 0 A_DRRP_TeleportationParticles();
            TNT1 A 1 A_JumpIf( !counter--, "Null" );
            Loop;
    }

}
