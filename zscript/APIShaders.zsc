/**
 * Copyright (c) 2018-2019 DRRP-Team
 *
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */

class ShaderControllerActor: StaticEventHandler {

    int WorldReloadedTick;

    override void WorldLoaded( WorldEvent e ) {
        if ( e.IsSaveGame ) {
            WorldReloadedTick = 1;
        }
    } // of override void WorldLoaded( WorldEvent e ) {

    override void PlayerEntered( PlayerEvent e ) {
        WorldReloadedTick = 1;
    } // of override void PlayerEntered( PlayerEvent e ) {

    override void WorldTick() {
        if ( WorldReloadedTick ) {

            WorldReloadedTick--;

            if ( !WorldReloadedTick ) {
                PlayerInfo player;
                for ( int i = 0; i < MAXPLAYERS; i++ ) {
                    player = Players[ i ];
                    if ( ( player == null ) || ( player.mo == null ) || !PlayerInGame[ i ] ) 
                        continue;
                    player.mo.ACS_NamedExecute( "onCinematicShadersReload", 0 );
                    console.printf( "#ShaderControllerActor: success call to ACS script." );
                    break;
                } // for ( int i = 0; i < MAXPLAYERS; i++ ) {

            } // if ( !WorldReloadedTick ) {
        } // if ( WorldReloadedTick ) {
    } // of override void WorldTick() {


    static int SetEnabled(int player, String name, bool isEnabled) {
        if (player != 0) {
            Shader.SetEnabled(players[player - 1], name, isEnabled);
        } else {
            for(int i = 0; i < players.Size(); i++) {
                Shader.SetEnabled(players[i], name, isEnabled);
            }
        }

        return 1;
    }

    static int SetUniformFloat(int player, String name, String uniform, float value) {
        if (player > 0) {
            Shader.SetUniform1f(players[player - 1], name, uniform, value);
        } else {
            for(int i = 0; i < players.Size(); i++) {
                Shader.SetUniform1f(players[player], name, uniform, value);
            }
        }

        return 1;
    }

    static int SetUniformInt(int player, String name, String uniform, int value) {
        if (player > 0) {
            Shader.SetUniform1i(players[player - 1], name, uniform, value);
        } else {
            for(int i = 0; i < players.Size(); i++) {
                Shader.SetUniform1i(players[player], name, uniform, value);
            }
        }

        return 1;
    }

    override void RenderOverlay(RenderEvent e) {
        PlayerInfo players = players[consoleplayer];

        Shader.SetUniform1f(players, "HeatHaze", "timer", gametic + e.FracTic);
        Shader.SetUniform1f(players, "FilmGrain", "timer", gametic + e.FracTic);
        Shader.SetUniform1f(players, "XHUBGrain", "timer", gametic + e.FracTic);
    }

}
