/**
 *Copyright (c) 2018-2019 DRRP-Team
 *
 *This software is released under the MIT License.
 *https://opensource.org/licenses/MIT
 */

class StatInfoMenu : OptionMenu {

    Enum EColors {
        cNormal = Font.CR_GRAY,
        cBad    = Font.CR_RED,
        cGood   = Font.CR_DARKGREEN,
        cHeader = Font.CR_BLUE
    } // of Enum EColors

    String StatLocalize( String postfix ) {
        return StringTable.Localize( "$DRRP_D_STATINFO_" .. postfix );
    } // of String StatLocalize( String postfix ) {

    void addStr( OptionMenuDescriptor desc, int textColor, String text ) {
        OptionMenuItemStaticText menuitem = new( "OptionMenuItemStaticText" );
        menuitem.Init( text );
        menuitem.mColor = textColor;
        desc.mItems.push( menuitem );
    } // of void addStr( OptionMenuDescriptor desc, String text ) {

    void addItemStr( OptionMenuDescriptor desc, Inventory item, String text, bool sizeless = false ) {
        if ( item == null ) 
            text = text .. "0";
        else if ( sizeless )
            text = text .. item.Amount;
        else
            text = text .. item.Amount .. "/" .. item.MaxAmount;

        addStr( desc, ( item == null ) || ( !item.amount ) ? cBad : 
                    ( item.Amount >= item.MaxAmount ? cGood : cNormal ), text );
    } // of void addItemStr( OptionMenuDescriptor desc, Inventory item, String text, bool sizeless = false ) {

    void addSpecIntStr( OptionMenuDescriptor desc, int checkInt, int maxInt, String text, bool bad_checking = false ) {

        addStr( desc, ( checkInt <= 0 ) && bad_checking ? cBad : 
                    ( ( checkInt >= maxInt ) ? cGood : cNormal ), 
                text .. checkInt .. "/" .. maxInt );
    } // of void addSpecIntStr( OptionMenuDescriptor desc, int checkInt, int maxInt, String text, bool bad_check = false ) {

    void addHeaderStr( OptionMenuDescriptor desc, String headerText ) {
        int headerMaxLength = 20;
        addStr( desc, cNormal, " " );

        headerText = " " .. headerText .. " ";
        while ( headerText.Length() < headerMaxLength ) 
            headerText = "-" .. headerText .. "-";

        addStr( desc, cHeader, headerText );
    } // of void addHeaderStr( OptionMenuDescriptor desc, String text ) {




    override void Init( Menu parent, OptionMenuDescriptor desc ) {

        Super.Init( parent, desc );
        PlayerInfo pStat = Players[ consoleplayer ];
        desc.mItems.clear();

        if ( pStat == null || pStat.mo == null ) {
            addStr( desc, cNormal, "$DRRP_D_STATINFO_NOTINGAME" );
            return;
        }

        String tempStr; // For non-standart expressions (if any).
        String notNow = StatLocalize( "UNDERCONSTRUCT" );

        addHeaderStr( desc, StatLocalize( "PLAYER_T" ) );
        addSpecIntStr( desc, pStat.mo.health, pStat.mo.MaxHealth, StatLocalize( "HEALTH" ), true );
        addItemStr( desc, pStat.mo.FindInventory( "DRRPBasicArmor" ), StatLocalize( "ARMOR" ) );
        addItemStr( desc, pStat.mo.FindInventory( "Credit" ), StatLocalize( "CREDITS" ), true );
        addStr( desc, cNormal, StatLocalize( "LEVEL" ) .. DRRPPlayer( pStat.mo ).Level );
        addSpecIntStr( desc, DRRPPlayer( pStat.mo ).Experience, DRRPPlayer( pStat.mo ).NextLevelXP, StatLocalize( "EXPERIENCE" ) );
        addStr( desc, cNormal, StatLocalize( "DEFENCE" ) .. DRRPPlayer( pStat.mo ).Defense );
        addStr( desc, cNormal, StatLocalize( "STRENGTH" ) .. DRRPPlayer( pStat.mo ).Strength );
        addStr( desc, cNormal, StatLocalize( "AGILITY" ) .. DRRPPlayer( pStat.mo ).Agility );
        addStr( desc, cNormal, StatLocalize( "ACCURACY" ) .. DRRPPlayer( pStat.mo ).Accuracy );

        addHeaderStr( desc, StatLocalize( "THISSECTOR_T" ) );
        addStr( desc, cNormal, StatLocalize( "TIME" ) .. level.time / 35 );
        addSpecIntStr( desc, level.found_secrets, level.total_secrets, StatLocalize( "SECRETS" ) );
        addSpecIntStr( desc, level.killed_monsters, level.total_monsters, StatLocalize( "MONSTERS" ) );
        addStr( desc, cNormal, StatLocalize( "TURNS" ) .. notNow );
        addStr( desc, cNormal, StatLocalize( "EXPERIENCE" ) .. notNow );

        addHeaderStr( desc, StatLocalize( "TOTAL_T" ) );
        addStr( desc, cNormal, StatLocalize( "TIME" ) .. level.totaltime / 35 );
        addStr( desc, cNormal, StatLocalize( "TURNS" ) .. notNow );
        addStr( desc, cNormal, StatLocalize( "DEATHS" ) .. notNow );

        addHeaderStr( desc, StatLocalize( "MAXKILLS_T" ) );
        addStr( desc, cNormal, notNow );

        addHeaderStr( desc, StatLocalize( "MAXSECRETS_T" ) );
        addStr( desc, cNormal, notNow );

    } // override void Init( Menu parent, OptionMenuDescriptor desc ) {
}
