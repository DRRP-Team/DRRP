/**
 * Copyright (c) 2019 DRRP-Team
 * 
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */

enum RPGGetFeatureTypes {
    RPG_Level,
    RPG_Experience,
    RPG_NextLevelXP,
    RPG_MaxHealth,
    RPG_MaxArmor,
    RPG_Accuracy,
    RPG_Agility,
    RPG_Defense,
    RPG_Strength
}

class DRRPMath {
    const e = 2.71828182845904523536;

    // Returns (digit^power).
    //(I think there's no situations in project where I may use imaginary numbers).
    static double Power( double digit, double power ) {
        double outValue = 1.0;

        if ( power != 0.0 ) {
            if ( digit > 0.0 )
                exp( power * log( digit ) );
            else if ( digit == 0.0 )
                outValue = 0.0;
            else
                outValue = exp( power * log( abs( digit ) ) ) * ( power > 0.0? 1 : -1 );
        }

        return outValue;
    } // of static double Power( double digit, double power ) {

}

class DRRPActorAdditionalFunctions play {

    const velocityParticlesDelay = 4;
    // The higher the value this constant has, the slower the particle speed.

    static play Actor SummonDRRPParticle( Actor spawner, name spawnee, double splatXY, double splatZ ) {
        Actor particle = Actor.Spawn( spawnee, (
                                spawner.pos.x + Random( splatXY * 0.5, splatXY * 1.5 ) * RandomPick( -1, 1 ),
                                spawner.pos.y + Random( splatXY * 0.5, splatXY * 1.5 ) * RandomPick( -1, 1 ),
                                spawner.pos.z + Random( splatZ * 0.05, splatZ * 0.95 ) ) );
        particle.Vel = ( ( spawner.pos.x - particle.pos.x ) / velocityParticlesDelay,
                         ( spawner.pos.y - particle.pos.y ) / velocityParticlesDelay,
                         ( ( spawner.pos.z + splatZ / 2 ) - particle.pos.z ) / velocityParticlesDelay );
        return particle;
    }

} // of class DRRPActorAdditionalFunctions {



class DRRPIntToStringBruteforceMultiMapArrayWrapper {
    Array<String> TheStringArray;
}

class DRRPIntToStringBruteforceMultiMap {
    private Array<int> TheIntArray;
    private Array<DRRPIntToStringBruteforceMultiMapArrayWrapper> TheStringArrayArray;
    
    void Put(int key, String value) {
        for(int i = 0; i < TheIntArray.Size(); i++) {
            if(key == TheIntArray[i]) {
                if(TheStringArrayArray[i].TheStringArray.Find(value) == TheStringArrayArray[i].TheStringArray.Size()) {
                    TheStringArrayArray[i].TheStringArray.Push(value);
                }
                return;
            }
        }
        TheIntArray.Push(key);
        DRRPIntToStringBruteforceMultiMapArrayWrapper TheWrapper = new("DRRPIntToStringBruteforceMultiMapArrayWrapper");
        TheWrapper.TheStringArray.Push(value);
        TheStringArrayArray.Push(TheWrapper);
    }
    
    DRRPIntToStringBruteforceMultiMapArrayWrapper Get(int key) {
        for(int i = 0; i < TheIntArray.Size(); i++) {
            if(key == TheIntArray[i]) {
                return TheStringArrayArray[i];
            }
        }
        DRRPIntToStringBruteforceMultiMapArrayWrapper TheWrapper = new("DRRPIntToStringBruteforceMultiMapArrayWrapper");
        return TheWrapper;
    }
}
