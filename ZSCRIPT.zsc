/**
 * Copyright (c) 2017-2019 DRRP-Team
 * 
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */

version "2.5"

#include "zscript/Patches.zsc"
#include "zscript/Actors.zsc"
#include "zscript/Weapons.zsc"

// APIs
#include "zscript/APIWeapons.zsc"
#include "zscript/APIConversation.zsc"
#include "zscript/APIShaders.zsc"
#include "zscript/APINotebook.zsc"

// Visual
#include "zscript/Infobar.zsc"
#include "zscript/Compass.zsc"
#include "zscript/StatInfo.zsc"
#include "zscript/Flashlight.zsc"
#include "zscript/HUD.zsc"
#include "zscript/Doorcode.zsc"

// Tools
#include "zscript/RPGSystem.zsc"
#include "zscript/System.zsc"
#include "zscript/Utils.zsc"
#include "zscript/Monsters.zsc"



class DRRPPlayer: DoomPlayer {

    int Experience, NextLevelXP, Level, Accuracy, Agility, Defense, Strength;

    override void BeginPlay() {
        Experience = Accuracy = Agility = Defense = Strength = 0;
        Level = 1;
        RPGSystemHandler.setAllFeatures( self );
        Super.BeginPlay();
    }

    static int GetFeature( Actor activator, int type ) {
        if ( activator && activator.player && ( activator is "DRRPPlayer" ) ) {
            DRRPPlayer player = DRRPPlayer( activator );
            switch ( type ) {
                case RPG_MaxHealth:  return player.MaxHealth;
                case RPG_Experience: return player.Experience;
                case RPG_NextLevelXP:return player.NextLevelXP;
                case RPG_Level:      return player.Level;
                case RPG_MaxArmor:   break;//returns "200" //return self.FindInventory( "BasicArmor" ).MaxAmount;
                case RPG_Accuracy:   return player.Accuracy;
                case RPG_Agility:    return player.Agility;
                case RPG_Defense:    return player.Defense;
                case RPG_Strength:   return player.Strength;
                default: break;
            }
        } // of if ( activator && activator.player && ( activator is "DRRPPlayer" ) ) {
        return -1;
    }

    static void SetFeature( Actor activator, int type, int value, bool setFeatureConsequence = true ) {
        if ( ( value < 0 ) || !activator || !activator.player || !( activator is "DRRPPlayer" ) ) return;
        DRRPPlayer player = DRRPPlayer( activator );
        switch ( type ) {
            case RPG_MaxHealth:{ player.MaxHealth = value; if ( setFeatureConsequence ) RPGSystemHandler.setHealthFeatures( player );  break; }
            case RPG_MaxArmor:   break;//self.FindInventory( "BasicArmor" ).MaxAmount = value;
            case RPG_Experience: player.Experience = value; break;
            case RPG_NextLevelXP:player.NextLevelXP = value; break;
            case RPG_Level:    { player.Level = value;    if ( setFeatureConsequence ) RPGSystemHandler.setLevelFeatures( player );    break; }
            case RPG_Accuracy: { player.Accuracy = value; if ( setFeatureConsequence ) RPGSystemHandler.setAccuracyFeatures( player ); break; }
            case RPG_Agility:  { player.Agility = value;  if ( setFeatureConsequence ) RPGSystemHandler.setAgilityFeatures( player );  break; }
            case RPG_Defense:  { player.Defense = value;  if ( setFeatureConsequence ) RPGSystemHandler.setDefenseFeatures( player );  break; }
            case RPG_Strength: { player.Strength = value; if ( setFeatureConsequence ) RPGSystemHandler.setStrengthFeatures( player ); break; }
            default: break;
        }
    }

    static double GetScatterMultiplier( Actor activator ) {
        if ( !( activator is "DRRPPlayer" ) ) return -1;
        return DRRPMath.PowerFloatToInt( DRRPMath.e * 0.378, -DRRPPlayer( activator ).Accuracy );
    } 

}
