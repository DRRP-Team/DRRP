/**
 * Copyright (c) 2017-2021 DRRP-Team
 * 
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */

version "2.5"

#include "zscript/Patches.zsc"
#include "zscript/Actors.zsc"
#include "zscript/Weapons.zsc"

// APIs
#include "zscript/DRRP_API/APIWeapons.zsc"
#include "zscript/DRRP_API/APIConversation.zsc"
#include "zscript/DRRP_API/APIDoorCode.zsc"
#include "zscript/DRRP_API/APIShaders.zsc"
#include "zscript/DRRP_API/APINotebook.zsc"

// Visual
#include "zscript/DRRP_MiscClasses/Infobar.zsc"
#include "zscript/DRRP_MiscClasses/Compass.zsc"
#include "zscript/DRRP_MiscClasses/StatInfo.zsc"
#include "zscript/DRRP_MiscClasses/Flashlight.zsc"
//#include "zscript/DRRP_MiscClasses/HUD.zsc" // Errr, "NullHUD"?

// Tools
#include "zscript/RPGSystem.zsc"
#include "zscript/DRRP_MiscClasses/Utils.zsc"



class DRRPPlayer: DoomPlayer {
    static const String dogNames[] = { "HellHound", "Cerberus", "DemonWolf" };

    int Experience, NextLevelXP, Level, Accuracy, Agility, Defense, Strength, MaxArmor;

    override void BeginPlay() {
        Experience = Accuracy = Agility = Defense = Strength = 0;
        Level = 1;
        MaxArmor = 30;
        setAllPlayerLevelupFeatures();
        Super.BeginPlay();
    }


    /* Static get/set features methods (usually for ACS) */
    static int GetFeatureStatic( Actor activator, int type ) {
        int outValue = -1;

        if ( activator && activator.player && ( activator is "DRRPPlayer" ) )
            outValue = DRRPPlayer( activator ).GetFeature( type );

        return outValue;
    }

    static void SetFeatureStatic( Actor activator, int type, int value, bool setFeatureConsequence = true ) {
        if ( ( value < 0 ) || !activator || !activator.player || !( activator is "DRRPPlayer" ) )
            return;

        DRRPPlayer( activator ).SetFeature( type, value, setFeatureConsequence );
    }


    /* Overridable feature types */
    virtual void SetLevelFeatures() {
        self.NextLevelXP += self.Level * 20;
    }

    virtual void SetAgilityFeatures() {
        self.ForwardMove1 = self.Agility * 0.025 + 0.6;
        self.ForwardMove2 = self.ForwardMove1 * 0.58333;
        self.SideMove1    = self.Agility * 0.025 + 0.55;
        self.SideMove2    = self.SideMove1 * 0.54545;
    }

    virtual void SetHealthFeatures() {
        self.A_GiveInventory( "DRRPHealthVial", 999 ); // Heal player to MaxHealth (cannot call "A_SetHealth()" here).
        self.MugShotMaxHealth = self.MaxHealth;
    }

    virtual void SetArmorFeatures() {
        Inventory armor = FindInventory( "DRRPBasicArmor" );
        if ( armor ) 
            armor.MaxAmount = self.MaxArmor;
    }

    virtual void SetDefenseFeatures() {}

    virtual void SetAccuracyFeatures() {}

    virtual void SetStrengthFeatures() {}


    /* Features getter/setter */
    int GetFeature( int type ) {

        switch ( type ) {
            case RPG_MaxHealth:  return self.MaxHealth;
            case RPG_Experience: return self.Experience;
            case RPG_NextLevelXP:return self.NextLevelXP;
            case RPG_Level:      return self.Level;
            case RPG_MaxArmor:   return self.MaxArmor;
            case RPG_Accuracy:   return self.Accuracy;
            case RPG_Agility:    return self.Agility;
            case RPG_Defense:    return self.Defense;
            case RPG_Strength:   return Strength;
            default: break;
        }

        return -1;
    }

    void SetFeature( int type, int value, bool setFeatureConsequence = true ) {
        switch ( type ) {
            case RPG_MaxHealth:   self.MaxHealth = value; if ( setFeatureConsequence ) setHealthFeatures();  break; 
            case RPG_MaxArmor:    self.MaxArmor = value;  if ( setFeatureConsequence ) setArmorFeatures();   break; 

            case RPG_Experience:  self.Experience = value;
            case RPG_NextLevelXP: self.NextLevelXP = value;
            case RPG_Experience:
            case RPG_NextLevelXP:
                if ( setFeatureConsequence ) {
                    for ( int i = 0; i < MAXPLAYERS; i++ )
                        if ( players[ i ].mo == self ) {
                            EventHandler.SendNetworkEvent( "DRRP_Exp_Check", i );
                            break;
                        }
                }
                break;

            case RPG_Level:       self.Level = value;    if ( setFeatureConsequence ) setLevelFeatures();    break; 
            case RPG_Accuracy:    self.Accuracy = value; if ( setFeatureConsequence ) setAccuracyFeatures(); break; 
            case RPG_Agility:     self.Agility = value;  if ( setFeatureConsequence ) setAgilityFeatures();  break; 
            case RPG_Defense:     self.Defense = value;  if ( setFeatureConsequence ) setDefenseFeatures();  break; 
            case RPG_Strength:    self.Strength = value; if ( setFeatureConsequence ) setStrengthFeatures(); break; 
            default: break;
        }
    }

    /* Sets all player level up features. */
    void SetAllPlayerLevelupFeatures() {
        SetLevelFeatures();

        SetAccuracyFeatures();
        SetAgilityFeatures();
        SetDefenseFeatures();
        SetStrengthFeatures();

        SetHealthFeatures();
        SetArmorFeatures();
    } // of static void setAllPlayerLevelupFeatures( DRRPPlayer player ) {



    double GetScatterMultiplier() {
        return DRRPMath.Power( DRRPMath.e * 0.3725, -self.Accuracy );
    } 

    play virtual int getRPGAttackDamage( int min, int max = 0 ) {
        if ( ( max == 0 ) || ( max < min ) )
            max = min;

        int damageMultiplier = DRRPMath.Power( GetFeature( RPG_Strength ), 0.6 ) * 0.33 + 0.67;

        return Random( min + damageMultiplier, max + damageMultiplier );
    }

    play virtual int getRPGDefenseDamage( int damage, name mod ) {

        CVar DebugCVar = CVar.GetCVar( "drrp_debug_mode", self.player );
        if ( DebugCVar && DebugCVar.GetBool() )
            console.printf( "#DRRPPlayer::getRPGDefenseDamage. Incoming damage: " .. damage .. "; DamageType: " .. mod .. "." );

        damage *= DRRPMath.Power( DRRPMath.e * 0.377, -( 1 + self.Defense ) );
        String ReadyWeapon = "";
        if ( self.player.ReadyWeapon ) 
            ReadyWeapon = self.player.ReadyWeapon.GetClassName();
            // We may haven't any weapons, for example, in Sector 3, Nadira's hall.

        if ( ( ReadyWeapon ~== "DRRPAxe" ) && ( mod != 'DRRPFireDmg' ) ) {
            S_Sound( "weapon/axe/block", CHAN_AUTO, 0.67 );
            return damage / 2;
        }

        for ( int i = 0; i < DRRPPlayer.dogNames.Size(); i++ ) {
            if ( ReadyWeapon.Left( DRRPPlayer.dogNames[ i ].Length() ) == DRRPPlayer.dogNames[ i ] ) {
                S_Sound( "monsters/hellhound/pain", CHAN_WEAPON, 0.5 );
                TakeInventory( DRRPPlayer.dogNames[ i ] .. "Health", damage );

                if ( FindInventory( DRRPPlayer.dogNames[ i ] .. "Health" ).Amount == 0 ) {
                    TakeInventory( ReadyWeapon, 1 );
                    S_Sound( "monsters/hellhound/death", CHAN_WEAPON, 0.5 );
                }

                return 0;
            }
        }

        return damage;

    } // of play virtual int getRPGDefenseDamage( int damage, name mod ) {
}
