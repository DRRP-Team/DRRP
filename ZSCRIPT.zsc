/**
 * Copyright (c) 2017-2019 DRRP-Team
 * 
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */

version "2.5"

#include "zscript/Patches.zsc"
#include "zscript/Actors.zsc"
#include "zscript/Weapons.zsc"

// APIs
#include "zscript/DRRP_API/APIWeapons.zsc"
#include "zscript/DRRP_API/APIConversation.zsc"
#include "zscript/DRRP_API/APIShaders.zsc"
#include "zscript/DRRP_API/APINotebook.zsc"

// Visual
#include "zscript/DRRP_MiscClasses/Infobar.zsc"
#include "zscript/DRRP_MiscClasses/Compass.zsc"
#include "zscript/DRRP_MiscClasses/StatInfo.zsc"
#include "zscript/DRRP_MiscClasses/Flashlight.zsc"
//#include "zscript/DRRP_MiscClasses/HUD.zsc"
#include "zscript/DRRP_MiscClasses/DoorCode.zsc"

// Tools
#include "zscript/RPGSystem.zsc"
#include "zscript/DRRP_MiscClasses/Utils.zsc"



class DRRPPlayer: DoomPlayer {

    const RPG_DAMAGE_STRENGTH_MULTIPLIER = 1; // From ACS
    static const String dogNames[] = { "HellHound", "Cerberus", "DemonWolf" };

    int Experience, NextLevelXP, Level, Accuracy, Agility, Defense, Strength, MaxArmor;

    override void BeginPlay() {
        Experience = Accuracy = Agility = Defense = Strength = 0;
        Level = 1;
        MaxArmor = 30;
        setAllPlayerLevelupFeatures( self );
        Super.BeginPlay();
    }

    static int GetFeature( Actor activator, int type ) {
        if ( activator && activator.player && ( activator is "DRRPPlayer" ) ) {
            DRRPPlayer player = DRRPPlayer( activator );
            switch ( type ) {
                case RPG_MaxHealth:  return player.MaxHealth;
                case RPG_Experience: return player.Experience;
                case RPG_NextLevelXP:return player.NextLevelXP;
                case RPG_Level:      return player.Level;
                case RPG_MaxArmor:   return player.MaxArmor;
                case RPG_Accuracy:   return player.Accuracy;
                case RPG_Agility:    return player.Agility;
                case RPG_Defense:    return player.Defense;
                case RPG_Strength:   return player.Strength;
                default: break;
            }
        } // of if ( activator && activator.player && ( activator is "DRRPPlayer" ) ) {
        return -1;
    }

    static void SetFeature( Actor activator, int type, int value, bool setFeatureConsequence = true ) {
        if ( ( value < 0 ) || !activator || !activator.player || !( activator is "DRRPPlayer" ) ) return;
        DRRPPlayer player = DRRPPlayer( activator );

        switch ( type ) {
            case RPG_MaxHealth:  player.MaxHealth = value; if ( setFeatureConsequence ) RPGSystemHandler.setHealthFeatures( player );  break; 
            case RPG_MaxArmor:   player.MaxArmor = value;  if ( setFeatureConsequence ) RPGSystemHandler.setArmorFeatures( player );   break; 
            case RPG_Experience: 
                player.Experience = value; 
                if ( setFeatureConsequence ) {
                    int i = 0;
                    for ( ; i < MAXPLAYERS; i++ )
                        if ( players[ i ].mo == player ) break;
                    EventHandler.SendNetworkEvent( "DRRP_Exp_Check", i );
                }
                break;
            case RPG_NextLevelXP:
                player.NextLevelXP = value;
                if ( setFeatureConsequence ) {
                    int i = 0;
                    for ( ; i < MAXPLAYERS; i++ )
                        if ( players[ i ].mo == player ) break;
                    EventHandler.SendNetworkEvent( "DRRP_Exp_Check", i );
                }
                break;
            case RPG_Level:      player.Level = value;    if ( setFeatureConsequence ) RPGSystemHandler.setLevelFeatures( player );    break; 
            case RPG_Accuracy:   player.Accuracy = value; if ( setFeatureConsequence ) RPGSystemHandler.setAccuracyFeatures( player ); break; 
            case RPG_Agility:    player.Agility = value;  if ( setFeatureConsequence ) RPGSystemHandler.setAgilityFeatures( player );  break; 
            case RPG_Defense:    player.Defense = value;  if ( setFeatureConsequence ) RPGSystemHandler.setDefenseFeatures( player );  break; 
            case RPG_Strength:   player.Strength = value; if ( setFeatureConsequence ) RPGSystemHandler.setStrengthFeatures( player ); break; 
            default: break;
        }
    }

    /* Sets all player level up features. */
    static void setAllPlayerLevelupFeatures( DRRPPlayer player ) {
        // Level features:
        player.NextLevelXP += player.Level * 20;

        // Armor features:
        Inventory armor = player.FindInventory( "DRRPBasicArmor" );
        if ( armor ) armor.MaxAmount = player.MaxArmor;

        // Agility features:
        player.ForwardMove1 = player.Agility * 0.025 + 0.6;
        player.ForwardMove2 = player.ForwardMove1 * 0.58333;
        player.SideMove1    = player.Agility * 0.025 + 0.55;
        player.SideMove2    = player.SideMove1 * 0.54545;

        // Health features:
        player.A_GiveInventory( "DRRPHealthVial", 999 );
        player.MugShotMaxHealth = player.MaxHealth;
    } // of static void setAllPlayerLevelupFeatures( DRRPPlayer player ) {



    static double GetScatterMultiplier( Actor activator ) {
        if ( !( activator is "DRRPPlayer" ) ) return -1;
        return DRRPMath.PowerFloatToInt( DRRPMath.e * 0.378, -DRRPPlayer( activator ).Accuracy );
    } 

    static play int getRPGAttackDamage( Actor player, int min, int max = 0 ) {
        if ( !player || !player.player || !( player is "DRRPPlayer" ) ) return -1;

        if ( ( max == 0 ) || ( max < min ) )
            max = min;

        int damageMultiplier = DRRPPlayer( player ).GetFeature( player, RPG_Strength ) * RPG_DAMAGE_STRENGTH_MULTIPLIER;

        return Random( min + damageMultiplier, max + damageMultiplier );
    }

    static play int getRPGDefenseDamage( Actor activator, int damage, name mod ) {
        if ( !activator || !activator.player || !( activator is "DRRPPlayer" ) ) return -1;

        CVar DebugCVar = CVar.GetCVar( "drrp_debug_mode", activator.player );
        if ( DebugCVar && DebugCVar.GetBool() )
            console.printf( "#DRRPPlayer::getRPGDefenseDamage. Incoming damage: " .. damage .. "; DamageType: " .. mod .. "." );

        damage *= DRRPMath.PowerFloatToInt( DRRPMath.e * 0.377, -( 1 + DRRPPlayer( activator ).Defense ) );
        String ReadyWeapon = "";
        if ( activator.player.ReadyWeapon ) 
            ReadyWeapon = activator.player.ReadyWeapon.GetClassName();
            // We may haven't any weapons, for example, in Sector 3, Nadira's hall.

        if ( ( ReadyWeapon ~== "DRRPAxe" ) && ( mod != 'DRRPFireDmg' ) ) {
            activator.S_Sound( "weapon/axe/block", CHAN_AUTO, 0.67 );
            return damage / 2;
        }

        for ( int i = 0; i < DRRPPlayer.dogNames.Size(); i++ ) {
            if ( ReadyWeapon.Left( DRRPPlayer.dogNames[ i ].Length() ) == DRRPPlayer.dogNames[ i ] ) {
                activator.S_Sound( "monsters/hellhound/pain", CHAN_WEAPON, 0.5 );
                activator.TakeInventory( DRRPPlayer.dogNames[ i ] .. "Health", damage );

                if ( activator.FindInventory( DRRPPlayer.dogNames[ i ] .. "Health" ).Amount == 0 ) {
                    activator.TakeInventory( ReadyWeapon, 1 );
                    activator.S_Sound( "monsters/hellhound/death", CHAN_WEAPON, 0.5 );
                }

                return 0;
            }
        }

        return damage;

    } // of static play int getRPGDefenseDamage( Actor activator, int damage, name mod ) {
}
