#include "zcommon.acs"

#define CURSOR 200

#define id_cursor		9970
#define id_choices		9980

int ThisScript = 0;
int menu = OFF;
int currentchoice = 0;
int maxchoices = 0;

Script "onCinematicShadersLoad" (bool forced) {}

function void DRPGMessage (str Message){
	print(s:"Not implemented!");
	print(s:Message);
}

Script 11 (void) {
	SetFont("HELP");
	hudmessage(s:"A"; HUDMSG_FADEOUT, 2, CR_UNTRANSLATED, 0.5, 0.5, 1.0);
	SetFont("SmallFont");
	hudmessage(s:"123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"; HUDMSG_FADEOUT, 1, CR_UNTRANSLATED, 0.5, 0.6, 1.0, 1.0);
}

function void DRRPPrint(str Text) { //s: -> str
    //int ReadedKey;
    Thing_Stop( 0 ); //TID_Player -> 0
    //SetPlayerProperty( 0, True, PROP_TOTALLYFROZEN );
    //While ( ReadedKey != BT_USE ) {
        SetFont( "M_MENU" );
        HudMessage( s: "A"; HUDMSG_PLAIN, 5, 0, 0.5, 5.5, 1.0 );
		hudmessage(s:"123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"; HUDMSG_FADEOUT, 6, CR_UNTRANSLATED, 0.5, 5.6, 5.0, 1.0);
        //Print( s: Text );
        //Delay( 1 ); //Latent functions cannot be used inside functions.
        //ReadedKey = GetPlayerInput( 0, INPUT_BUTTONS );//-1
    //}
    HudMessage( s: ""; HUDMSG_PLAIN, 5, 0, 0.5, 0.5, 1.0 );
    //SetPlayerProperty( 0, False, PROP_TOTALLYFROZEN );
}

script 12 (void) {
	DRRPPrint("Hello, Marine!");
}

bool testshader = false;

Script 13 (void) {
	testshader = !testshader;
	print(s:testshader?"Enable":"Disable");
	ScriptCall("ShaderControllerActor", "SetEnabled", PlayerNumber(), "TestShader", testshader);
	// AmbientSound("grunt/pain", 255);
	// delay(15);
	// for(float c = 0; c < 8.0; c+=1.0) {
		// ScriptCall("ShaderControllerActor", "SetUniformFloat", PlayerNumber(), "TestShader", "coeff", c);testshader);
		// delay(5);
	// }
	// ScriptCall("ShaderControllerActor", "SetEnabled", PlayerNumber(), "DoubleVisionShader", false);!testshader);
}

// Computer room

const int COMP_NAME_ID = 42;
const int COMP_DESC_ID = 43;
const int COMP_NUMB_ID = 44;
const int BIGFNT_WIDTH = 5;

Script 15 (int comp) { // About the computer
	str name        = "";
	str description = "";

	switch(comp) {
		case 1:
			name        = "Monologue API testing";
			description = "This computer switches scientist's phrases";
			break;
		case 2:
			name		= "WIP Level notificator";
			description	= "Notificates user this level is work-in-progress";
			break;
		case 3:
			name		= "Door code API";
			description	= "A test for PROPHESSOR's door code API";
			break;
		default:
			Terminate;
	}

	SetHudSize(640, 480, false);
	SetFont("bigfont");
	HudMessage(s:"Computer ", i:comp; HUDMSG_PLAIN, COMP_NUMB_ID, CR_RED,    310.0, 032.0, 15.0);
	HudMessage(s:name;                HUDMSG_PLAIN, COMP_NAME_ID, CR_YELLOW, 320.0 - (strlen(name) * BIGFNT_WIDTH),        100.0, 15.0);
	HudMessage(s:description;         HUDMSG_PLAIN, COMP_DESC_ID, CR_GREEN,  120.0 - (strlen(description) * BIGFNT_WIDTH), 240.0, 15.0);
}

Script 16 (int comp) { // Activate the computer
	// TODO:
	switch(comp) {
		case 1: // Monologue API testing
			print(s:"Switched");
			ScriptCall("ConversationLineController", "SetArgument", 1,
				ScriptCall("ConversationLineController", "GetArgument", 1) + 1
			);
			break;
		case 2:
			ACS_ExecuteAlways(3003, 0);
			break;
		case 3:
			ACS_Execute(301, 0, 0, 2); // Typical generated script
			break;
		default:
			print(s:"Computer ", i:comp, s:" is inactive");
	}
}

Script 300 (int arg1, int arg2, int arg3, int arg4) {
	print(s:"Arg1: ", i:arg1, s:"\nArg2: ", i:arg2, s:"\nArg3: ", i:arg3, s:"\nArg4: ", i:arg4);
}

Script 301 (int larg, int carg, int arg3) {
	// PROPHESSOR:
	// Using ACS_NamedExecuteWithResult because of 4 available arguments instead of 3 in ACS_NamedExecute
	//                                                                     Message               Password  Script
	if(carg == 2 && larg == 0) ACS_NamedExecuteWithResult("lockwindow", "The password is 1234",   "1234",   301,    carg);
	if(carg == 2 && larg == 0) Terminate;
	if(carg == 2) print(s:"La pasvorto estas korekta");
}

// Shop


function void ClearMsg ( int id )
{
  HudMessage(s:""; 0,id,-1,0,0,0);
}

function void Choice ( int number, int name )
{
  SetHudSize(384,256,0);
  SetFont("SmallFont");                    //You may change this...
  HudMessage(d:number+1,s:". \cl",s:name;  // or this, to your liking. Everything else should probably stay the same.
  HUDMSG_PLAIN,id_choices+number,CR_GREEN,67.1,170.1+(number*8.0),9999.0);
  ACS_Execute(CURSOR,0);
  maxchoices = number;
  menu = ON;

  for(int x=1; x<=100; x++)
  ClearMsg(id_choices+number+x);
}

function void ClearCursor ( void )
{
  ACS_Terminate(CURSOR,0);
  ClearMsg(id_cursor);
  for(int x=0; x<=100; x++)
  ClearMsg(id_choices+x);
  LocalAmbientSound("menu/clear",127); //Get rid of this (or any other LocalAmbientSounds) if it annoys you. :P
  menu = OFF;
}

// The following four scripts are best kept as scripts due to:
// (a) functions being unable to handle delays
// (b) "puke" being unable to grab the number of a script as defined in the scripts lump.

// You should define CURSOR as a number that won't interfere with your scripts.
script CURSOR ( void )
{
  SetHudSize(384,256,0);;
  HudMessage(s:"\cj*";
  HUDMSG_PLAIN,id_cursor,-1,52.1,170.1+(currentchoice*8.0),0.12);
  delay(5);
  restart;
}

script 201 ( void ) NET // MENU UP.
{
  if(menu==ON)
  {
    if(currentchoice>0) currentchoice--;
    LocalAmbientSound("menu/cursor",127);
  }
}

script 202 ( void ) NET // MENU DOWN.
{
  if(menu==ON)
  {
    if(currentchoice<=maxchoices-1) currentchoice++;
    LocalAmbientSound("menu/cursor",127);
  }
}

script 203 ( void ) NET // MENU SELECT.
{
  if(menu==ON)
  {
    ClearMsg(id_cursor);
    ACS_Execute(ThisScript,0);
    delay(1); // Don't ask me why this needs to be here; it just... does.
    currentchoice = 0;
  }
}

/**************************************MAP SCRIPTS**************************************/

// Example script to demonstrate setting up this choice menu.
script 52 ( void )
{
  ThisScript = 52; // Feh, stupid hacky way of telling script 203 which script to resume. :(
                   // Set this value to whatever number the script is.

  // =========================================================================================
  // WARNING: You shouldn't put this script in a place within your map where the script can be
  // triggered multiple times - it will take effect as if the select key was pressed.
  // =========================================================================================

  // Time to set up the choices menu. Choices must be in order and start from 0.
  Choice(0,"Shotgun");
  Choice(1,"Chaingun");
  Choice(2,"BFG9000");
  suspend;
  switch(currentchoice) //This can be changed to an "if" statement if you wish.
  {
  // The following cases can do ABSOLUTELY anything you want.
  // I've set them up to give you weapons when selected.
  case 0:
    GiveInventory("Shotgun",1);
    SetWeapon("Shotgun");
    break;
  case 1:
    GiveInventory("Chaingun",1);
    SetWeapon("Chaingun");
    break;
  case 2:
    // A menu within a menu! Feel free to have as many branches as you wish.
    // (The masochistic types may want to do a full dialog tree for an NPC.) :P
    LocalAmbientSound("menu/choose",127);
    Print(s:"Are you sure? This is a cheapass weapon.");
    Choice(0,"Yes.");
    Choice(1,"No.");
    suspend;
    switch(currentchoice) //Another switch, within a switch! Have as many of these as you want,
                          //provided you place a "suspend" immediately before each one.
    {
    case 0:
      GiveInventory("BFG9000",1);
      SetWeapon("BFG9000");
    }
  }

  ClearCursor(); //This will get rid of the menu.
}

script 53 ( void )
{
  ThisScript = 53; // Feh, stupid hacky way of telling script 203 which script to resume. :(
                   // Set this value to whatever number the script is.

  // =========================================================================================
  // WARNING: You shouldn't put this script in a place within your map where the script can be
  // triggered multiple times - it will take effect as if the select key was pressed.
  // =========================================================================================

  // Time to set up the choices menu. Choices must be in order and start from 0.
  Choice(0,"Small Medkit");
  Choice(1,"Large Medkit");
  Choice(2,"Soul Sphere");
  Choice(3,"Berserker");
  Choice(4,"Dog Collar");
  suspend;
  switch(currentchoice) //This can be changed to an "if" statement if you wish.
  {
  // The following cases can do ABSOLUTELY anything you want.
  // I've set them up to give you weapons when selected.
  case 0:
    GiveInventory("SmallMedikit",1);
    break;
  case 1:
    GiveInventory("LargeMedkit",1);
    break;
  case 2:
	GiveInventory("SoulSphere",1);
	break;
  case 3:
    GiveInventory("Berserker",1);
	break;
  case 4:
	GiveInventory("DogCollar",1);
	break;
  default:
    // A menu within a menu! Feel free to have as many branches as you wish.
    // (The masochistic types may want to do a full dialog tree for an NPC.) :P
    LocalAmbientSound("menu/choose",127);
    Print(s:"Are you sure? This is a cheapass weapon.");
    Choice(0,"Yes.");
    Choice(1,"No.");
    suspend;
    switch(currentchoice) //Another switch, within a switch! Have as many of these as you want,
                          //provided you place a "suspend" immediately before each one.
    {
    case 0:
      GiveInventory("BFG9000",1);
      SetWeapon("BFG9000");
    }
  }

  ClearCursor(); //This will get rid of the menu.
}

Script 684(int code, int front, int back) {
	print(s:"Password is 1234");
	if(ScriptCall("DoorCodeInputActor", "DoorCode", code, front, back) == 0) {
		print(s:"\c*Success");
	} else {
		print(s:"\cGFail");
	}
}

str shadernames[] = { "TestShader", "FilmGrain", "HeatHaze", "XHUBGrain", "DoubleVisionShader", "RadialBlurShader",
                      "INTRO", "SEC1", "SEC2", "SEC3", "SEC4", "SEC5", "SEC6", "SEC7_Before", "SEC7_After", "XHUB", "REAC" };
bool shaders[]    = { false, false, false, false, false, false,
                      false, false, false, false, false, false, false, false, false, false, false };

Script 685(int index) {
    shaders[index] = !shaders[index];
    ScriptCall("ShaderControllerActor", "SetEnabled", PlayerNumber(), shadernames[index], shaders[index]);
    Print(s:"Shader \"", s:shadernames[index], s:"\" ", s:shaders[index] ? "enabled" : "disabled");
}

Script 686 (void) {
    Print(s:"Set HeatHaze temperature to 1.0");
    ScriptCall("ShaderControllerActor", "SetUniformFloat", PlayerNumber(), "HeatHaze", "Temperature", 1.0);
}